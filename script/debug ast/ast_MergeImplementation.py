#!/usr/bin/env python
from athstmt import *
from athinterpreter import TildeAthInterp

stmts = AthStatementList([
    AthTokenStatement('FABRICATE', [AthCustomFunction('REVERSE', ['STRUCT'], AthStatementList([
        AthTokenStatement('REPLICATE', [IdentifierToken('QUEUE'), None]),
        AthTokenStatement('REPLICATE', [IdentifierToken('STACK'), IdentifierToken('STRUCT')]),
        AthTokenStatement('BIFURCATE', [IdentifierToken('STACK'), IdentifierToken('HEAD'), IdentifierToken('STACK')]),
        AthTokenStatement('AGGREGATE', [IdentifierToken('QUEUE'), IdentifierToken('HEAD'), IdentifierToken('NULL')]),
        TildeAthLoop(False, AthStatementList([
            AthTokenStatement('BIFURCATE', [IdentifierToken('STACK'), IdentifierToken('HEAD'), IdentifierToken('STACK')]),
            AthTokenStatement('AGGREGATE', [IdentifierToken('QUEUE'), IdentifierToken('HEAD'), IdentifierToken('QUEUE')]),
            ], pendant='STACK'),
            AthTokenStatement('EXECUTE', [IdentifierToken('NULL')])),
        AthTokenStatement('DIVULGATE', [IdentifierToken('QUEUE')])
        ], pendant='REVERSE'))]),
    AthTokenStatement('FABRICATE', [AthCustomFunction('MERGESORT', ['STRUCT', 'LEN'], AthStatementList([
        CondiJump([BnaryExpr(['<', IdentifierToken('LEN'), LiteralToken(2, int)]), 1]),
        AthTokenStatement('DIVULGATE', [IdentifierToken('STRUCT')]),
        AthTokenStatement('REPLICATE', [IdentifierToken('LENL'), BnaryExpr(['/_', IdentifierToken('LEN'), LiteralToken(2, int)])]),
        AthTokenStatement('REPLICATE', [IdentifierToken('LENR'), BnaryExpr(['-', IdentifierToken('LEN'), IdentifierToken('LENL')])]),
        AthTokenStatement('REPLICATE', [IdentifierToken('TEMPL'), None]),
        AthTokenStatement('REPLICATE', [IdentifierToken('TEMPR'), IdentifierToken('STRUCT')]),
        AthTokenStatement('REPLICATE', [IdentifierToken('IDX'), LiteralToken(1, int)]),
        AthTokenStatement('BIFURCATE', [IdentifierToken('TEMPR'), IdentifierToken('HEAD'), IdentifierToken('TEMPR')]),
        AthTokenStatement('AGGREGATE', [IdentifierToken('TEMPL'), IdentifierToken('HEAD'), IdentifierToken('NULL')]),
        TildeAthLoop(False, AthStatementList([
            CondiJump([BnaryExpr(['>=', IdentifierToken('IDX'), IdentifierToken('LENL')]), 1]),
            AthTokenStatement('DIE', ['IDX']),
            AthTokenStatement('BIFURCATE', [IdentifierToken('TEMPR'), IdentifierToken('HEAD'), IdentifierToken('TEMPR')]),
            AthTokenStatement('AGGREGATE', [IdentifierToken('TEMPL'), IdentifierToken('HEAD'), IdentifierToken('TEMPL')]),
            AthTokenStatement('PROCREATE', [IdentifierToken('IDX'), BnaryExpr(['+', IdentifierToken('IDX'), LiteralToken(1, int)])]),
            ], pendant='IDX'),
            AthTokenStatement('EXECUTE', [IdentifierToken('NULL')])),
        AthTokenStatement('REPLICATE', [IdentifierToken('TEMPL'), AthTokenStatement('EXECUTE', [IdentifierToken('REVERSE'), IdentifierToken('TEMPL')])]),
        CondiJump([BnaryExpr(['>', IdentifierToken('LENL'), LiteralToken(1, int)]), 1]),
        AthTokenStatement('REPLICATE', [IdentifierToken('TEMPL'), AthTokenStatement('EXECUTE', [IdentifierToken('MERGESORT'), IdentifierToken('TEMPL'), IdentifierToken('LENL')])]),
        CondiJump([BnaryExpr(['>', IdentifierToken('LENR'), LiteralToken(1, int)]), 1]),
        AthTokenStatement('REPLICATE', [IdentifierToken('TEMPR'), AthTokenStatement('EXECUTE', [IdentifierToken('MERGESORT'), IdentifierToken('TEMPR'), IdentifierToken('LENR')])]),
        AthTokenStatement('REPLICATE', [IdentifierToken('MERGED'), None]),
        AthTokenStatement('REPLICATE', [IdentifierToken('FLAG'), None]),
        AthTokenStatement('REPLICATE', [IdentifierToken('LOOP'), None]),
        TildeAthLoop(False, AthStatementList([
            CondiJump([BnaryExpr(['&&', BnaryExpr(['>', IdentifierToken('LENL'), LiteralToken(0, int)]), BnaryExpr(['>', IdentifierToken('LENR'), LiteralToken(0, int)])]), 21]),
            AthTokenStatement('BIFURCATE', [IdentifierToken('TEMPL'), IdentifierToken('HEADL'), IdentifierToken('NEXTL')]),
            AthTokenStatement('BIFURCATE', [IdentifierToken('TEMPR'), IdentifierToken('HEADR'), IdentifierToken('NEXTR')]),
            CondiJump([BnaryExpr(['>', IdentifierToken('HEADL'), IdentifierToken('HEADR')]), 9]),
            CondiJump([IdentifierToken('FLAG'), 3]),
            AthTokenStatement('AGGREGATE', [IdentifierToken('MERGED'), IdentifierToken('HEADR'), IdentifierToken('NULL')]),
            AthTokenStatement('DIE', ['FLAG']),
            CondiJump([None, 1]),
            AthTokenStatement('AGGREGATE', [IdentifierToken('MERGED'), IdentifierToken('HEADR'), IdentifierToken('MERGED')]),
            AthTokenStatement('PROCREATE', [IdentifierToken('LENR'), BnaryExpr(['-', IdentifierToken('LENR'), LiteralToken(1, int)])]),
            AthTokenStatement('BIFURCATE', [IdentifierToken('NEXTR'), IdentifierToken('L'), IdentifierToken('R')]),
            AthTokenStatement('AGGREGATE', [IdentifierToken('TEMPR'), IdentifierToken('L'), IdentifierToken('R')]),
            CondiJump([None, 20]),
            CondiJump([IdentifierToken('FLAG'), 3]),
            AthTokenStatement('AGGREGATE', [IdentifierToken('MERGED'), IdentifierToken('HEADL'), IdentifierToken('NULL')]),
            AthTokenStatement('DIE', ['FLAG']),
            CondiJump([None, 1]),
            AthTokenStatement('AGGREGATE', [IdentifierToken('MERGED'), IdentifierToken('HEADL'), IdentifierToken('MERGED')]),
            AthTokenStatement('PROCREATE', [IdentifierToken('LENL'), BnaryExpr(['-', IdentifierToken('LENL'), LiteralToken(1, int)])]),
            AthTokenStatement('BIFURCATE', [IdentifierToken('NEXTL'), IdentifierToken('L'), IdentifierToken('R')]),
            AthTokenStatement('AGGREGATE', [IdentifierToken('TEMPL'), IdentifierToken('L'), IdentifierToken('R')]),
            CondiJump([None, 11]),
            CondiJump([BnaryExpr(['>', IdentifierToken('LENL'), LiteralToken(0, int)]), 4]),
            AthTokenStatement('BIFURCATE', [IdentifierToken('TEMPL'), IdentifierToken('HEADL'), IdentifierToken('TEMPL')]),
            AthTokenStatement('AGGREGATE', [IdentifierToken('MERGED'), IdentifierToken('HEADL'), IdentifierToken('MERGED')]),
            AthTokenStatement('PROCREATE', [IdentifierToken('LENL'), BnaryExpr(['-', IdentifierToken('LENL'), LiteralToken(1, int)])]),
            CondiJump([None, 6]),
            CondiJump([BnaryExpr(['>', IdentifierToken('LENR'), LiteralToken(0, int)]), 4]),
            AthTokenStatement('BIFURCATE', [IdentifierToken('TEMPR'), IdentifierToken('HEADR'), IdentifierToken('TEMPR')]),
            AthTokenStatement('AGGREGATE', [IdentifierToken('MERGED'), IdentifierToken('HEADR'), IdentifierToken('MERGED')]),
            AthTokenStatement('PROCREATE', [IdentifierToken('LENR'), BnaryExpr(['-', IdentifierToken('LENR'), LiteralToken(1, int)])]),
            CondiJump([None, 1]),
            AthTokenStatement('DIE', ['LOOP']),
            ], pendant='LOOP'),
            AthTokenStatement('EXECUTE', [IdentifierToken('NULL')])),
        AthTokenStatement('DIVULGATE', [AthTokenStatement('EXECUTE', [IdentifierToken('REVERSE'), IdentifierToken('MERGED')])])
        ], pendant='MERGESORT'))]),
    AthTokenStatement('PROCREATE', [IdentifierToken('LLEN'), LiteralToken(0, int)]),
    AthTokenStatement('PROCREATE', [IdentifierToken('LIST'), None]),
    TildeAthLoop(False, AthStatementList([
        AthTokenStatement('print', [LiteralToken('Select action:\\n', str)]),
        AthTokenStatement('print', [LiteralToken('[1] Add an integer to the list\\n', str)]),
        AthTokenStatement('print', [LiteralToken('[2] Sort and print list\\n', str)]),
        AthTokenStatement('print', [LiteralToken('[3] Exit\\n', str)]),
        AthTokenStatement('input', [IdentifierToken('CHOICE'), LiteralToken('', str)]),
        CondiJump([BnaryExpr(['==', IdentifierToken('CHOICE'), LiteralToken(3, int)]), 2]),
        AthTokenStatement('DIE', ['THIS']),
        CondiJump([None, 23]),
        CondiJump([BnaryExpr(['==', IdentifierToken('CHOICE'), LiteralToken(2, int)]), 12]),
        AthTokenStatement('BIFURCATE', [IdentifierToken('LIST'), IdentifierToken('L'), IdentifierToken('R')]),
        CondiJump([IdentifierToken('L'), 8]),
        AthTokenStatement('REPLICATE', [IdentifierToken('SORTED'), AthTokenStatement('EXECUTE', [IdentifierToken('MERGESORT'), IdentifierToken('LIST'), IdentifierToken('LLEN')])]),
        AthTokenStatement('BIFURCATE', [IdentifierToken('SORTED'), IdentifierToken('L'), IdentifierToken('R')]),
        AthTokenStatement('AGGREGATE', [IdentifierToken('LIST'), IdentifierToken('L'), IdentifierToken('R')]),
        AthTokenStatement('REPLICATE', [IdentifierToken('TEMP'), IdentifierToken('LIST')]),
        AthTokenStatement('print', [LiteralToken('The items in sorted ascending order are:\\n[', str)]),
        TildeAthLoop(False, AthStatementList([
            AthTokenStatement('BIFURCATE', [IdentifierToken('TEMP'), IdentifierToken('HEAD'), IdentifierToken('TEMP')]),
            AthTokenStatement('print', [LiteralToken('~s', str), IdentifierToken('HEAD')]),
            CondiJump([IdentifierToken('TEMP'), 1]),
            AthTokenStatement('print', [LiteralToken(', ', str)]),
            ], pendant='TEMP'),
            AthTokenStatement('EXECUTE', [IdentifierToken('NULL')])),
        AthTokenStatement('print', [LiteralToken(']\\n', str)]),
        CondiJump([None, 12]),
        AthTokenStatement('print', [LiteralToken('List is empty, oops.\\n', str)]),
        CondiJump([None, 10]),
        CondiJump([BnaryExpr(['==', IdentifierToken('CHOICE'), LiteralToken(1, int)]), 8]),
        AthTokenStatement('REPLICATE', [IdentifierToken('ITEM'), LiteralToken('', str)]),
        AthTokenStatement('input', [IdentifierToken('ITEM'), LiteralToken('Input string to add: ', str)]),
        CondiJump([BnaryExpr(['==', IdentifierToken('LLEN'), LiteralToken(0, int)]), 2]),
        AthTokenStatement('AGGREGATE', [IdentifierToken('LIST'), IdentifierToken('ITEM'), IdentifierToken('NULL')]),
        CondiJump([None, 1]),
        AthTokenStatement('AGGREGATE', [IdentifierToken('LIST'), IdentifierToken('ITEM'), IdentifierToken('LIST')]),
        AthTokenStatement('PROCREATE', [IdentifierToken('LLEN'), BnaryExpr(['+', IdentifierToken('LLEN'), LiteralToken(1, int)])]),
        CondiJump([None, 1]),
        AthTokenStatement('print', [LiteralToken('Invalid choice, try again.\\n', str)]),
        ], pendant='THIS'),
        AthTokenStatement('EXECUTE', [IdentifierToken('NULL')]))
    ], pendant='THIS')
TildeAthInterp().exec_stmts('MergeImplementation.~ATH', stmts)
