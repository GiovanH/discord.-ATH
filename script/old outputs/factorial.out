VarExpr('NUM')
VarExpr('FACTORIAL')
BinaryExpr('-', VarExpr('NUM'), IntExpr(1))
DivulgateStmt(BinaryExpr('*', VarExpr('NUM'), ExecuteStmt([VarExpr('FACTORIAL'), BinaryExpr('-', VarExpr('NUM'), IntExpr(1))])))
DebateStmt(BinaryExpr('>', VarExpr('NUM'), IntExpr(1)), Serialize([DivulgateStmt(BinaryExpr('*', VarExpr('NUM'), ExecuteStmt([VarExpr('FACTORIAL'), BinaryExpr('-', VarExpr('NUM'), IntExpr(1))])))], THIS), [])
DivulgateStmt(IntExpr(1))
FabricateStmt(VarExpr('FACTORIAL'), [VarExpr('NUM')], Serialize([DebateStmt(BinaryExpr('>', VarExpr('NUM'), IntExpr(1)), Serialize([DivulgateStmt(BinaryExpr('*', VarExpr('NUM'), ExecuteStmt([VarExpr('FACTORIAL'), BinaryExpr('-', VarExpr('NUM'), IntExpr(1))])))], THIS), []), DivulgateStmt(IntExpr(1))], THIS))
InputStmt(VarExpr('NUM'), StringExpr('Get the factorial of: '))
StringExpr('~d! is ~d\\n')
VarExpr('NUM')
VarExpr('FACTORIAL')
VarExpr('NUM')
ExecuteStmt([VarExpr('FACTORIAL'), VarExpr('NUM')])
PrintFunc([StringExpr('~d! is ~d\\n'), VarExpr('NUM'), ExecuteStmt([VarExpr('FACTORIAL'), VarExpr('NUM')])])
KillFunc(VarExpr('THIS'), [])
TildeAthLoop(False, VarExpr('THIS'), Serialize([InputStmt(VarExpr('NUM'), StringExpr('Get the factorial of: ')), PrintFunc([StringExpr('~d! is ~d\\n'), VarExpr('NUM'), ExecuteStmt([VarExpr('FACTORIAL'), VarExpr('NUM')])]), KillFunc(VarExpr('THIS'), [])], THIS))
VarExpr('NULL')
ExecuteStmt([VarExpr('NULL')])
Graft(Serialize([FabricateStmt(VarExpr('FACTORIAL'), [VarExpr('NUM')], Serialize([DebateStmt(BinaryExpr('>', VarExpr('NUM'), IntExpr(1)), Serialize([DivulgateStmt(BinaryExpr('*', VarExpr('NUM'), ExecuteStmt([VarExpr('FACTORIAL'), BinaryExpr('-', VarExpr('NUM'), IntExpr(1))])))], THIS), []), DivulgateStmt(IntExpr(1))], THIS)), TildeAthLoop(False, VarExpr('THIS'), Serialize([InputStmt(VarExpr('NUM'), StringExpr('Get the factorial of: ')), PrintFunc([StringExpr('~d! is ~d\\n'), VarExpr('NUM'), ExecuteStmt([VarExpr('FACTORIAL'), VarExpr('NUM')])]), KillFunc(VarExpr('THIS'), [])], THIS)), ExecuteStmt([VarExpr('NULL')])], THIS), 65)
Get the factorial of: 4! is 24
{'THIS': BuiltinSymbol(True, None, None), 'NULL': BuiltinSymbol(False, None, None), 'DIE': BuiltinSymbol(True, None, None), 'ATH': BuiltinSymbol(True, None, None), 'print': BuiltinSymbol(True, None, None), 'input': BuiltinSymbol(True, None, None), 'import': BuiltinSymbol(True, None, None), 'DEBATE': BuiltinSymbol(True, None, None), 'UNLESS': BuiltinSymbol(True, None, None), 'EXECUTE': BuiltinSymbol(True, None, None), 'DIVULGATE': BuiltinSymbol(True, None, None), 'FABRICATE': BuiltinSymbol(True, None, None), 'REPLICATE': BuiltinSymbol(True, None, None), 'PROCREATE': BuiltinSymbol(True, None, None), 'BIFURCATE': BuiltinSymbol(True, None, None), 'AGGREGATE': BuiltinSymbol(True, None, None), 'ENUMERATE': BuiltinSymbol(True, None, None), 'FACTORIAL': AthSymbol(True, None, AthFunction('FACTORIAL', [VarExpr('NUM')], Serialize([DebateStmt(BinaryExpr('>', VarExpr('NUM'), IntExpr(1)), Serialize([DivulgateStmt(BinaryExpr('*', VarExpr('NUM'), ExecuteStmt([VarExpr('FACTORIAL'), BinaryExpr('-', VarExpr('NUM'), IntExpr(1))])))], FACTORIAL), []), DivulgateStmt(IntExpr(1))], FACTORIAL)))}
{'NUM': AthSymbol(True, 4, None)}

<--
	Input
	Code check: Recursive function calls, DIVULGATE
	Status: PASSED
-->
4