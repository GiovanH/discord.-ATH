ProcreateStmt(VarExpr('LOOP'), IntExpr(0))
InputStmt(VarExpr('A'), StringExpr('A: '))
InputStmt(VarExpr('B'), StringExpr('B: '))
InputStmt(VarExpr('C'), StringExpr('C: '))
ReplicateStmt(VarExpr('R'), BinaryExpr('/', BinaryExpr('+', UnaryArithExpr('-', VarExpr('B')), BinaryExpr('**', BinaryExpr('-', BinaryExpr('**', VarExpr('B'), IntExpr(2)), BinaryExpr('*', BinaryExpr('*', IntExpr(4), VarExpr('A')), VarExpr('C'))), BinaryExpr('/', IntExpr(1), IntExpr(2)))), BinaryExpr('*', IntExpr(2), VarExpr('A'))))
ReplicateStmt(VarExpr('S'), BinaryExpr('/', BinaryExpr('-', UnaryArithExpr('-', VarExpr('B')), BinaryExpr('**', BinaryExpr('-', BinaryExpr('**', VarExpr('B'), IntExpr(2)), BinaryExpr('*', BinaryExpr('*', IntExpr(4), VarExpr('A')), VarExpr('C'))), BinaryExpr('/', IntExpr(1), IntExpr(2)))), BinaryExpr('*', IntExpr(2), VarExpr('A'))))
StringExpr('The roots of the quadratic equation ~dx^2 + ~dx + ~d are ~d and ~d.')
VarExpr('A')
VarExpr('B')
VarExpr('C')
VarExpr('R')
VarExpr('S')
PrintFunc([StringExpr('The roots of the quadratic equation ~dx^2 + ~dx + ~d are ~d and ~d.'), VarExpr('A'), VarExpr('B'), VarExpr('C'), VarExpr('R'), VarExpr('S')])
KillFunc(VarExpr('LOOP'), [])
TildeAthLoop(False, VarExpr('LOOP'), Serialize([InputStmt(VarExpr('A'), StringExpr('A: ')), InputStmt(VarExpr('B'), StringExpr('B: ')), InputStmt(VarExpr('C'), StringExpr('C: ')), ReplicateStmt(VarExpr('R'), BinaryExpr('/', BinaryExpr('+', UnaryArithExpr('-', VarExpr('B')), BinaryExpr('**', BinaryExpr('-', BinaryExpr('**', VarExpr('B'), IntExpr(2)), BinaryExpr('*', BinaryExpr('*', IntExpr(4), VarExpr('A')), VarExpr('C'))), BinaryExpr('/', IntExpr(1), IntExpr(2)))), BinaryExpr('*', IntExpr(2), VarExpr('A')))), ReplicateStmt(VarExpr('S'), BinaryExpr('/', BinaryExpr('-', UnaryArithExpr('-', VarExpr('B')), BinaryExpr('**', BinaryExpr('-', BinaryExpr('**', VarExpr('B'), IntExpr(2)), BinaryExpr('*', BinaryExpr('*', IntExpr(4), VarExpr('A')), VarExpr('C'))), BinaryExpr('/', IntExpr(1), IntExpr(2)))), BinaryExpr('*', IntExpr(2), VarExpr('A')))), PrintFunc([StringExpr('The roots of the quadratic equation ~dx^2 + ~dx + ~d are ~d and ~d.'), VarExpr('A'), VarExpr('B'), VarExpr('C'), VarExpr('R'), VarExpr('S')]), KillFunc(VarExpr('LOOP'), [])], LOOP))
KillFunc(VarExpr('THIS'), [])
Graft(Serialize([ProcreateStmt(VarExpr('LOOP'), IntExpr(0)), TildeAthLoop(False, VarExpr('LOOP'), Serialize([InputStmt(VarExpr('A'), StringExpr('A: ')), InputStmt(VarExpr('B'), StringExpr('B: ')), InputStmt(VarExpr('C'), StringExpr('C: ')), ReplicateStmt(VarExpr('R'), BinaryExpr('/', BinaryExpr('+', UnaryArithExpr('-', VarExpr('B')), BinaryExpr('**', BinaryExpr('-', BinaryExpr('**', VarExpr('B'), IntExpr(2)), BinaryExpr('*', BinaryExpr('*', IntExpr(4), VarExpr('A')), VarExpr('C'))), BinaryExpr('/', IntExpr(1), IntExpr(2)))), BinaryExpr('*', IntExpr(2), VarExpr('A')))), ReplicateStmt(VarExpr('S'), BinaryExpr('/', BinaryExpr('-', UnaryArithExpr('-', VarExpr('B')), BinaryExpr('**', BinaryExpr('-', BinaryExpr('**', VarExpr('B'), IntExpr(2)), BinaryExpr('*', BinaryExpr('*', IntExpr(4), VarExpr('A')), VarExpr('C'))), BinaryExpr('/', IntExpr(1), IntExpr(2)))), BinaryExpr('*', IntExpr(2), VarExpr('A')))), PrintFunc([StringExpr('The roots of the quadratic equation ~dx^2 + ~dx + ~d are ~d and ~d.'), VarExpr('A'), VarExpr('B'), VarExpr('C'), VarExpr('R'), VarExpr('S')]), KillFunc(VarExpr('LOOP'), [])], LOOP)), KillFunc(VarExpr('THIS'), [])], THIS), 119)
A: B: C: The roots of the quadratic equation 1x^2 + 2x + 1 are -1 and -1.{'THIS': BuiltinSymbol(True, None, None), 'NULL': BuiltinSymbol(False, None, None), 'DIE': BuiltinSymbol(True, None, None), 'ATH': BuiltinSymbol(True, None, None), 'print': BuiltinSymbol(True, None, None), 'input': BuiltinSymbol(True, None, None), 'import': BuiltinSymbol(True, None, None), 'DEBATE': BuiltinSymbol(True, None, None), 'UNLESS': BuiltinSymbol(True, None, None), 'EXECUTE': BuiltinSymbol(True, None, None), 'DIVULGATE': BuiltinSymbol(True, None, None), 'FABRICATE': BuiltinSymbol(True, None, None), 'REPLICATE': BuiltinSymbol(True, None, None), 'PROCREATE': BuiltinSymbol(True, None, None), 'BIFURCATE': BuiltinSymbol(True, None, None), 'AGGREGATE': BuiltinSymbol(True, None, None), 'ENUMERATE': BuiltinSymbol(True, None, None), 'LOOP': AthSymbol(False, 0, None)}

<--
	Input
	Code check: Unaries, order of operations
	Status: PASSED
-->