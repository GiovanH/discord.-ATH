VarExpr('LIST')
StringExpr('Merge sort algo start.\\n')
PrintFunc([StringExpr('Merge sort algo start.\\n')])
ReplicateStmt(VarExpr('CURR'), VarExpr('LIST'))
BifurcateStmt(VarExpr('CURR'), VarExpr('HEAD'), VarExpr('TAIL'))
BifurcateStmt(VarExpr('HEAD'), VarExpr('INDEX'), VarExpr('VALUE'))
ProcreateStmt(VarExpr('LEFT'), VarExpr('NULL'))
ProcreateStmt(VarExpr('RIGHT'), VarExpr('NULL'))
ReplicateStmt(VarExpr('LENGTH'), BinaryExpr('/_', VarExpr('INDEX'), IntExpr(2)))
ProcreateStmt(VarExpr('CNTL'), IntExpr(0))
ProcreateStmt(VarExpr('CNTR'), IntExpr(0))
ProcreateStmt(VarExpr('BLAH'), VarExpr('NULL'))
BifurcateStmt(VarExpr('CURR'), VarExpr('HEAD'), VarExpr('TAIL'))
BifurcateStmt(VarExpr('HEAD'), VarExpr('I'), VarExpr('VAL'))
AggregateStmt(VarExpr('CNTL'), VarExpr('VAL'), VarExpr('NODE'))
AggregateStmt(VarExpr('NODE'), VarExpr('LEFT'), VarExpr('LEFT'))
ReplicateStmt(VarExpr('CNTL'), BinaryExpr('+', VarExpr('CNTL'), IntExpr(1)))
AggregateStmt(VarExpr('CNTR'), VarExpr('VAL'), VarExpr('NODE'))
AggregateStmt(VarExpr('NODE'), VarExpr('RIGHT'), VarExpr('RIGHT'))
ReplicateStmt(VarExpr('CNTR'), BinaryExpr('+', VarExpr('CNTR'), IntExpr(1)))
UnlessStmt(None, Serialize([AggregateStmt(VarExpr('CNTR'), VarExpr('VAL'), VarExpr('NODE')), AggregateStmt(VarExpr('NODE'), VarExpr('RIGHT'), VarExpr('RIGHT')), ReplicateStmt(VarExpr('CNTR'), BinaryExpr('+', VarExpr('CNTR'), IntExpr(1)))], THIS))
DebateStmt(BinaryExpr('<', VarExpr('I'), VarExpr('LENGTH')), Serialize([AggregateStmt(VarExpr('CNTL'), VarExpr('VAL'), VarExpr('NODE')), AggregateStmt(VarExpr('NODE'), VarExpr('LEFT'), VarExpr('LEFT')), ReplicateStmt(VarExpr('CNTL'), BinaryExpr('+', VarExpr('CNTL'), IntExpr(1)))], THIS), [UnlessStmt(None, Serialize([AggregateStmt(VarExpr('CNTR'), VarExpr('VAL'), VarExpr('NODE')), AggregateStmt(VarExpr('NODE'), VarExpr('RIGHT'), VarExpr('RIGHT')), ReplicateStmt(VarExpr('CNTR'), BinaryExpr('+', VarExpr('CNTR'), IntExpr(1)))], THIS))])
ReplicateStmt(VarExpr('CURR'), VarExpr('TAIL'))
TildeAthLoop(False, VarExpr('BLAH'), Serialize([BifurcateStmt(VarExpr('CURR'), VarExpr('HEAD'), VarExpr('TAIL')), BifurcateStmt(VarExpr('HEAD'), VarExpr('I'), VarExpr('VAL')), DebateStmt(BinaryExpr('<', VarExpr('I'), VarExpr('LENGTH')), Serialize([AggregateStmt(VarExpr('CNTL'), VarExpr('VAL'), VarExpr('NODE')), AggregateStmt(VarExpr('NODE'), VarExpr('LEFT'), VarExpr('LEFT')), ReplicateStmt(VarExpr('CNTL'), BinaryExpr('+', VarExpr('CNTL'), IntExpr(1)))], BLAH), [UnlessStmt(None, Serialize([AggregateStmt(VarExpr('CNTR'), VarExpr('VAL'), VarExpr('NODE')), AggregateStmt(VarExpr('NODE'), VarExpr('RIGHT'), VarExpr('RIGHT')), ReplicateStmt(VarExpr('CNTR'), BinaryExpr('+', VarExpr('CNTR'), IntExpr(1)))], BLAH))]), ReplicateStmt(VarExpr('CURR'), VarExpr('TAIL'))], BLAH))
StringExpr('Split and recursed.\\n')
PrintFunc([StringExpr('Split and recursed.\\n')])
VarExpr('MERGESORT')
VarExpr('LEFT')
ReplicateStmt(VarExpr('LEFT'), ExecuteStmt([VarExpr('MERGESORT'), VarExpr('LEFT')]))
VarExpr('MERGESORT')
VarExpr('RIGHT')
ReplicateStmt(VarExpr('RIGHT'), ExecuteStmt([VarExpr('MERGESORT'), VarExpr('RIGHT')]))
AggregateStmt(VarExpr('LEFT'), VarExpr('RIGHT'), VarExpr('TOMERGE'))
VarExpr('MERGE')
VarExpr('TOMERGE')
ReplicateStmt(VarExpr('SORTEDLIST'), ExecuteStmt([VarExpr('MERGE'), VarExpr('TOMERGE')]))
StringExpr('Going back now...\\n')
PrintFunc([StringExpr('Going back now...\\n')])
DivulgateStmt(VarExpr('SORTEDLIST'))
StringExpr('Lonely boi\\n')
PrintFunc([StringExpr('Lonely boi\\n')])
DivulgateStmt(VarExpr('CURR'))
UnlessStmt(None, Serialize([PrintFunc([StringExpr('Lonely boi\\n')]), DivulgateStmt(VarExpr('CURR'))], THIS))
DebateStmt(BinaryExpr('>', VarExpr('INDEX'), IntExpr(0)), Serialize([ProcreateStmt(VarExpr('LEFT'), VarExpr('NULL')), ProcreateStmt(VarExpr('RIGHT'), VarExpr('NULL')), ReplicateStmt(VarExpr('LENGTH'), BinaryExpr('/_', VarExpr('INDEX'), IntExpr(2))), ProcreateStmt(VarExpr('CNTL'), IntExpr(0)), ProcreateStmt(VarExpr('CNTR'), IntExpr(0)), ProcreateStmt(VarExpr('BLAH'), VarExpr('NULL')), TildeAthLoop(False, VarExpr('BLAH'), Serialize([BifurcateStmt(VarExpr('CURR'), VarExpr('HEAD'), VarExpr('TAIL')), BifurcateStmt(VarExpr('HEAD'), VarExpr('I'), VarExpr('VAL')), DebateStmt(BinaryExpr('<', VarExpr('I'), VarExpr('LENGTH')), Serialize([AggregateStmt(VarExpr('CNTL'), VarExpr('VAL'), VarExpr('NODE')), AggregateStmt(VarExpr('NODE'), VarExpr('LEFT'), VarExpr('LEFT')), ReplicateStmt(VarExpr('CNTL'), BinaryExpr('+', VarExpr('CNTL'), IntExpr(1)))], BLAH), [UnlessStmt(None, Serialize([AggregateStmt(VarExpr('CNTR'), VarExpr('VAL'), VarExpr('NODE')), AggregateStmt(VarExpr('NODE'), VarExpr('RIGHT'), VarExpr('RIGHT')), ReplicateStmt(VarExpr('CNTR'), BinaryExpr('+', VarExpr('CNTR'), IntExpr(1)))], BLAH))]), ReplicateStmt(VarExpr('CURR'), VarExpr('TAIL'))], BLAH)), PrintFunc([StringExpr('Split and recursed.\\n')]), ReplicateStmt(VarExpr('LEFT'), ExecuteStmt([VarExpr('MERGESORT'), VarExpr('LEFT')])), ReplicateStmt(VarExpr('RIGHT'), ExecuteStmt([VarExpr('MERGESORT'), VarExpr('RIGHT')])), AggregateStmt(VarExpr('LEFT'), VarExpr('RIGHT'), VarExpr('TOMERGE')), ReplicateStmt(VarExpr('SORTEDLIST'), ExecuteStmt([VarExpr('MERGE'), VarExpr('TOMERGE')])), PrintFunc([StringExpr('Going back now...\\n')]), DivulgateStmt(VarExpr('SORTEDLIST'))], THIS), [UnlessStmt(None, Serialize([PrintFunc([StringExpr('Lonely boi\\n')]), DivulgateStmt(VarExpr('CURR'))], THIS))])
FabricateStmt(VarExpr('MERGESORT'), [VarExpr('LIST')], Serialize([PrintFunc([StringExpr('Merge sort algo start.\\n')]), ReplicateStmt(VarExpr('CURR'), VarExpr('LIST')), BifurcateStmt(VarExpr('CURR'), VarExpr('HEAD'), VarExpr('TAIL')), BifurcateStmt(VarExpr('HEAD'), VarExpr('INDEX'), VarExpr('VALUE')), DebateStmt(BinaryExpr('>', VarExpr('INDEX'), IntExpr(0)), Serialize([ProcreateStmt(VarExpr('LEFT'), VarExpr('NULL')), ProcreateStmt(VarExpr('RIGHT'), VarExpr('NULL')), ReplicateStmt(VarExpr('LENGTH'), BinaryExpr('/_', VarExpr('INDEX'), IntExpr(2))), ProcreateStmt(VarExpr('CNTL'), IntExpr(0)), ProcreateStmt(VarExpr('CNTR'), IntExpr(0)), ProcreateStmt(VarExpr('BLAH'), VarExpr('NULL')), TildeAthLoop(False, VarExpr('BLAH'), Serialize([BifurcateStmt(VarExpr('CURR'), VarExpr('HEAD'), VarExpr('TAIL')), BifurcateStmt(VarExpr('HEAD'), VarExpr('I'), VarExpr('VAL')), DebateStmt(BinaryExpr('<', VarExpr('I'), VarExpr('LENGTH')), Serialize([AggregateStmt(VarExpr('CNTL'), VarExpr('VAL'), VarExpr('NODE')), AggregateStmt(VarExpr('NODE'), VarExpr('LEFT'), VarExpr('LEFT')), ReplicateStmt(VarExpr('CNTL'), BinaryExpr('+', VarExpr('CNTL'), IntExpr(1)))], BLAH), [UnlessStmt(None, Serialize([AggregateStmt(VarExpr('CNTR'), VarExpr('VAL'), VarExpr('NODE')), AggregateStmt(VarExpr('NODE'), VarExpr('RIGHT'), VarExpr('RIGHT')), ReplicateStmt(VarExpr('CNTR'), BinaryExpr('+', VarExpr('CNTR'), IntExpr(1)))], BLAH))]), ReplicateStmt(VarExpr('CURR'), VarExpr('TAIL'))], BLAH)), PrintFunc([StringExpr('Split and recursed.\\n')]), ReplicateStmt(VarExpr('LEFT'), ExecuteStmt([VarExpr('MERGESORT'), VarExpr('LEFT')])), ReplicateStmt(VarExpr('RIGHT'), ExecuteStmt([VarExpr('MERGESORT'), VarExpr('RIGHT')])), AggregateStmt(VarExpr('LEFT'), VarExpr('RIGHT'), VarExpr('TOMERGE')), ReplicateStmt(VarExpr('SORTEDLIST'), ExecuteStmt([VarExpr('MERGE'), VarExpr('TOMERGE')])), PrintFunc([StringExpr('Going back now...\\n')]), DivulgateStmt(VarExpr('SORTEDLIST'))], THIS), [UnlessStmt(None, Serialize([PrintFunc([StringExpr('Lonely boi\\n')]), DivulgateStmt(VarExpr('CURR'))], THIS))])], THIS))
VarExpr('LISTS')
StringExpr('Merging...\\n')
PrintFunc([StringExpr('Merging...\\n')])
ProcreateStmt(VarExpr('RESULT'), VarExpr('NULL'))
ProcreateStmt(VarExpr('CTR'), IntExpr(0))
BifurcateStmt(VarExpr('LISTS'), VarExpr('LEFTY'), VarExpr('RIGHTY'))
ReplicateStmt(VarExpr('CHECK'), BinaryExpr('&&', VarExpr('LEFTY'), VarExpr('RIGHTY')))
BifurcateStmt(VarExpr('LEFTY'), VarExpr('HEADL'), VarExpr('TAILL'))
BifurcateStmt(VarExpr('HEADL'), VarExpr('X'), VarExpr('VALL'))
BifurcateStmt(VarExpr('RIGHTY'), VarExpr('HEADR'), VarExpr('TAILR'))
BifurcateStmt(VarExpr('HEADR'), VarExpr('Y'), VarExpr('VALR'))
AggregateStmt(VarExpr('CTR'), VarExpr('VALL'), VarExpr('ITEM'))
ReplicateStmt(VarExpr('LEFTY'), VarExpr('TAILL'))
AggregateStmt(VarExpr('CTR'), VarExpr('VALR'), VarExpr('ITEM'))
ReplicateStmt(VarExpr('RIGHTY'), VarExpr('TAILR'))
UnlessStmt(None, Serialize([AggregateStmt(VarExpr('CTR'), VarExpr('VALR'), VarExpr('ITEM')), ReplicateStmt(VarExpr('RIGHTY'), VarExpr('TAILR'))], THIS))
DebateStmt(BinaryExpr('>=', VarExpr('VALL'), VarExpr('VALR')), Serialize([AggregateStmt(VarExpr('CTR'), VarExpr('VALL'), VarExpr('ITEM')), ReplicateStmt(VarExpr('LEFTY'), VarExpr('TAILL'))], THIS), [UnlessStmt(None, Serialize([AggregateStmt(VarExpr('CTR'), VarExpr('VALR'), VarExpr('ITEM')), ReplicateStmt(VarExpr('RIGHTY'), VarExpr('TAILR'))], THIS))])
AggregateStmt(VarExpr('ITEM'), VarExpr('RESULT'), VarExpr('RESULT'))
ReplicateStmt(VarExpr('CTR'), BinaryExpr('+', VarExpr('CTR'), IntExpr(1)))
ReplicateStmt(VarExpr('CHECK'), BinaryExpr('&&', VarExpr('LEFTY'), VarExpr('RIGHTY')))
TildeAthLoop(False, VarExpr('CHECK'), Serialize([BifurcateStmt(VarExpr('LEFTY'), VarExpr('HEADL'), VarExpr('TAILL')), BifurcateStmt(VarExpr('HEADL'), VarExpr('X'), VarExpr('VALL')), BifurcateStmt(VarExpr('RIGHTY'), VarExpr('HEADR'), VarExpr('TAILR')), BifurcateStmt(VarExpr('HEADR'), VarExpr('Y'), VarExpr('VALR')), DebateStmt(BinaryExpr('>=', VarExpr('VALL'), VarExpr('VALR')), Serialize([AggregateStmt(VarExpr('CTR'), VarExpr('VALL'), VarExpr('ITEM')), ReplicateStmt(VarExpr('LEFTY'), VarExpr('TAILL'))], CHECK), [UnlessStmt(None, Serialize([AggregateStmt(VarExpr('CTR'), VarExpr('VALR'), VarExpr('ITEM')), ReplicateStmt(VarExpr('RIGHTY'), VarExpr('TAILR'))], CHECK))]), AggregateStmt(VarExpr('ITEM'), VarExpr('RESULT'), VarExpr('RESULT')), ReplicateStmt(VarExpr('CTR'), BinaryExpr('+', VarExpr('CTR'), IntExpr(1))), ReplicateStmt(VarExpr('CHECK'), BinaryExpr('&&', VarExpr('LEFTY'), VarExpr('RIGHTY')))], CHECK))
BifurcateStmt(VarExpr('LEFTY'), VarExpr('HEADL'), VarExpr('TAILL'))
BifurcateStmt(VarExpr('HEADL'), VarExpr('X'), VarExpr('VALL'))
AggregateStmt(VarExpr('CTR'), VarExpr('VALL'), VarExpr('ITEM'))
AggregateStmt(VarExpr('ITEM'), VarExpr('RESULT'), VarExpr('RESULT'))
ReplicateStmt(VarExpr('CTR'), BinaryExpr('+', VarExpr('CTR'), IntExpr(1)))
ReplicateStmt(VarExpr('LEFTY'), VarExpr('TAILL'))
TildeAthLoop(False, VarExpr('LEFTY'), Serialize([BifurcateStmt(VarExpr('LEFTY'), VarExpr('HEADL'), VarExpr('TAILL')), BifurcateStmt(VarExpr('HEADL'), VarExpr('X'), VarExpr('VALL')), AggregateStmt(VarExpr('CTR'), VarExpr('VALL'), VarExpr('ITEM')), AggregateStmt(VarExpr('ITEM'), VarExpr('RESULT'), VarExpr('RESULT')), ReplicateStmt(VarExpr('CTR'), BinaryExpr('+', VarExpr('CTR'), IntExpr(1))), ReplicateStmt(VarExpr('LEFTY'), VarExpr('TAILL'))], LEFTY))
BifurcateStmt(VarExpr('RIGHTY'), VarExpr('HEADR'), VarExpr('TAILR'))
BifurcateStmt(VarExpr('HEADR'), VarExpr('Y'), VarExpr('VALR'))
AggregateStmt(VarExpr('CTR'), VarExpr('VALR'), VarExpr('ITEM'))
AggregateStmt(VarExpr('ITEM'), VarExpr('RESULT'), VarExpr('RESULT'))
ReplicateStmt(VarExpr('CTR'), BinaryExpr('+', VarExpr('CTR'), IntExpr(1)))
ReplicateStmt(VarExpr('RIGHTY'), VarExpr('TAILR'))
TildeAthLoop(False, VarExpr('RIGHTY'), Serialize([BifurcateStmt(VarExpr('RIGHTY'), VarExpr('HEADR'), VarExpr('TAILR')), BifurcateStmt(VarExpr('HEADR'), VarExpr('Y'), VarExpr('VALR')), AggregateStmt(VarExpr('CTR'), VarExpr('VALR'), VarExpr('ITEM')), AggregateStmt(VarExpr('ITEM'), VarExpr('RESULT'), VarExpr('RESULT')), ReplicateStmt(VarExpr('CTR'), BinaryExpr('+', VarExpr('CTR'), IntExpr(1))), ReplicateStmt(VarExpr('RIGHTY'), VarExpr('TAILR'))], RIGHTY))
StringExpr('Merged!\\n')
PrintFunc([StringExpr('Merged!\\n')])
DivulgateStmt(VarExpr('RESULT'))
FabricateStmt(VarExpr('MERGE'), [VarExpr('LISTS')], Serialize([PrintFunc([StringExpr('Merging...\\n')]), ProcreateStmt(VarExpr('RESULT'), VarExpr('NULL')), ProcreateStmt(VarExpr('CTR'), IntExpr(0)), BifurcateStmt(VarExpr('LISTS'), VarExpr('LEFTY'), VarExpr('RIGHTY')), ReplicateStmt(VarExpr('CHECK'), BinaryExpr('&&', VarExpr('LEFTY'), VarExpr('RIGHTY'))), TildeAthLoop(False, VarExpr('CHECK'), Serialize([BifurcateStmt(VarExpr('LEFTY'), VarExpr('HEADL'), VarExpr('TAILL')), BifurcateStmt(VarExpr('HEADL'), VarExpr('X'), VarExpr('VALL')), BifurcateStmt(VarExpr('RIGHTY'), VarExpr('HEADR'), VarExpr('TAILR')), BifurcateStmt(VarExpr('HEADR'), VarExpr('Y'), VarExpr('VALR')), DebateStmt(BinaryExpr('>=', VarExpr('VALL'), VarExpr('VALR')), Serialize([AggregateStmt(VarExpr('CTR'), VarExpr('VALL'), VarExpr('ITEM')), ReplicateStmt(VarExpr('LEFTY'), VarExpr('TAILL'))], CHECK), [UnlessStmt(None, Serialize([AggregateStmt(VarExpr('CTR'), VarExpr('VALR'), VarExpr('ITEM')), ReplicateStmt(VarExpr('RIGHTY'), VarExpr('TAILR'))], CHECK))]), AggregateStmt(VarExpr('ITEM'), VarExpr('RESULT'), VarExpr('RESULT')), ReplicateStmt(VarExpr('CTR'), BinaryExpr('+', VarExpr('CTR'), IntExpr(1))), ReplicateStmt(VarExpr('CHECK'), BinaryExpr('&&', VarExpr('LEFTY'), VarExpr('RIGHTY')))], CHECK)), TildeAthLoop(False, VarExpr('LEFTY'), Serialize([BifurcateStmt(VarExpr('LEFTY'), VarExpr('HEADL'), VarExpr('TAILL')), BifurcateStmt(VarExpr('HEADL'), VarExpr('X'), VarExpr('VALL')), AggregateStmt(VarExpr('CTR'), VarExpr('VALL'), VarExpr('ITEM')), AggregateStmt(VarExpr('ITEM'), VarExpr('RESULT'), VarExpr('RESULT')), ReplicateStmt(VarExpr('CTR'), BinaryExpr('+', VarExpr('CTR'), IntExpr(1))), ReplicateStmt(VarExpr('LEFTY'), VarExpr('TAILL'))], LEFTY)), TildeAthLoop(False, VarExpr('RIGHTY'), Serialize([BifurcateStmt(VarExpr('RIGHTY'), VarExpr('HEADR'), VarExpr('TAILR')), BifurcateStmt(VarExpr('HEADR'), VarExpr('Y'), VarExpr('VALR')), AggregateStmt(VarExpr('CTR'), VarExpr('VALR'), VarExpr('ITEM')), AggregateStmt(VarExpr('ITEM'), VarExpr('RESULT'), VarExpr('RESULT')), ReplicateStmt(VarExpr('CTR'), BinaryExpr('+', VarExpr('CTR'), IntExpr(1))), ReplicateStmt(VarExpr('RIGHTY'), VarExpr('TAILR'))], RIGHTY)), PrintFunc([StringExpr('Merged!\\n')]), DivulgateStmt(VarExpr('RESULT'))], THIS))
ProcreateStmt(VarExpr('LOOP'), VarExpr('NULL'))
ProcreateStmt(VarExpr('LIST'), VarExpr('NULL'))
ProcreateStmt(VarExpr('COUNT'), IntExpr(0))
StringExpr('Select action:')
PrintFunc([StringExpr('Select action:')])
StringExpr('[1] Add an integer to the list')
PrintFunc([StringExpr('[1] Add an integer to the list')])
StringExpr('[2] Sort and print list')
PrintFunc([StringExpr('[2] Sort and print list')])
StringExpr('[3] Exit')
PrintFunc([StringExpr('[3] Exit')])
InputStmt(VarExpr('CHOICE'), StringExpr(''))
KillFunc(VarExpr('LOOP'), [])
VarExpr('MERGESORT')
VarExpr('LIST')
ReplicateStmt(VarExpr('LIST'), ExecuteStmt([VarExpr('MERGESORT'), VarExpr('LIST')]))
StringExpr('List was successfully sorted.\\n')
PrintFunc([StringExpr('List was successfully sorted.\\n')])
ReplicateStmt(VarExpr('SORTED'), VarExpr('LIST'))
ProcreateStmt(VarExpr('END'), VarExpr('NULL'))
BifurcateStmt(VarExpr('SORTED'), VarExpr('HEAD'), VarExpr('TAIL'))
BifurcateStmt(VarExpr('HEAD'), VarExpr('INDEX'), VarExpr('VALUE'))
StringExpr('~d\\n')
VarExpr('VALUE')
PrintFunc([StringExpr('~d\\n'), VarExpr('VALUE')])
KillFunc(VarExpr('END'), [])
DebateStmt(UnaryArithExpr('!', VarExpr('TAIL')), Serialize([KillFunc(VarExpr('END'), [])], THIS), [])
TildeAthLoop(False, VarExpr('END'), Serialize([BifurcateStmt(VarExpr('SORTED'), VarExpr('HEAD'), VarExpr('TAIL')), BifurcateStmt(VarExpr('HEAD'), VarExpr('INDEX'), VarExpr('VALUE')), PrintFunc([StringExpr('~d\\n'), VarExpr('VALUE')]), DebateStmt(UnaryArithExpr('!', VarExpr('TAIL')), Serialize([KillFunc(VarExpr('END'), [])], END), [])], END))
StringExpr('Queue is empty.\\n')
PrintFunc([StringExpr('Queue is empty.\\n')])
UnlessStmt(None, Serialize([PrintFunc([StringExpr('Queue is empty.\\n')])], THIS))
DebateStmt(VarExpr('LIST'), Serialize([ReplicateStmt(VarExpr('LIST'), ExecuteStmt([VarExpr('MERGESORT'), VarExpr('LIST')])), PrintFunc([StringExpr('List was successfully sorted.\\n')]), ReplicateStmt(VarExpr('SORTED'), VarExpr('LIST')), ProcreateStmt(VarExpr('END'), VarExpr('NULL')), TildeAthLoop(False, VarExpr('END'), Serialize([BifurcateStmt(VarExpr('SORTED'), VarExpr('HEAD'), VarExpr('TAIL')), BifurcateStmt(VarExpr('HEAD'), VarExpr('INDEX'), VarExpr('VALUE')), PrintFunc([StringExpr('~d\\n'), VarExpr('VALUE')]), DebateStmt(UnaryArithExpr('!', VarExpr('TAIL')), Serialize([KillFunc(VarExpr('END'), [])], END), [])], END))], THIS), [UnlessStmt(None, Serialize([PrintFunc([StringExpr('Queue is empty.\\n')])], THIS))])
UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(2)), Serialize([DebateStmt(VarExpr('LIST'), Serialize([ReplicateStmt(VarExpr('LIST'), ExecuteStmt([VarExpr('MERGESORT'), VarExpr('LIST')])), PrintFunc([StringExpr('List was successfully sorted.\\n')]), ReplicateStmt(VarExpr('SORTED'), VarExpr('LIST')), ProcreateStmt(VarExpr('END'), VarExpr('NULL')), TildeAthLoop(False, VarExpr('END'), Serialize([BifurcateStmt(VarExpr('SORTED'), VarExpr('HEAD'), VarExpr('TAIL')), BifurcateStmt(VarExpr('HEAD'), VarExpr('INDEX'), VarExpr('VALUE')), PrintFunc([StringExpr('~d\\n'), VarExpr('VALUE')]), DebateStmt(UnaryArithExpr('!', VarExpr('TAIL')), Serialize([KillFunc(VarExpr('END'), [])], END), [])], END))], THIS), [UnlessStmt(None, Serialize([PrintFunc([StringExpr('Queue is empty.\\n')])], THIS))])], THIS))
InputStmt(VarExpr('ITEM'), StringExpr('Integer to add :'))
AggregateStmt(VarExpr('COUNT'), VarExpr('ITEM'), VarExpr('HEAD'))
AggregateStmt(VarExpr('HEAD'), VarExpr('LIST'), VarExpr('LIST'))
ReplicateStmt(VarExpr('COUNT'), BinaryExpr('+', VarExpr('COUNT'), IntExpr(1)))
UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(1)), Serialize([InputStmt(VarExpr('ITEM'), StringExpr('Integer to add :')), AggregateStmt(VarExpr('COUNT'), VarExpr('ITEM'), VarExpr('HEAD')), AggregateStmt(VarExpr('HEAD'), VarExpr('LIST'), VarExpr('LIST')), ReplicateStmt(VarExpr('COUNT'), BinaryExpr('+', VarExpr('COUNT'), IntExpr(1)))], THIS))
StringExpr('Invalid input.')
PrintFunc([StringExpr('Invalid input.')])
UnlessStmt(None, Serialize([PrintFunc([StringExpr('Invalid input.')])], THIS))
DebateStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(3)), Serialize([KillFunc(VarExpr('LOOP'), [])], THIS), [UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(2)), Serialize([DebateStmt(VarExpr('LIST'), Serialize([ReplicateStmt(VarExpr('LIST'), ExecuteStmt([VarExpr('MERGESORT'), VarExpr('LIST')])), PrintFunc([StringExpr('List was successfully sorted.\\n')]), ReplicateStmt(VarExpr('SORTED'), VarExpr('LIST')), ProcreateStmt(VarExpr('END'), VarExpr('NULL')), TildeAthLoop(False, VarExpr('END'), Serialize([BifurcateStmt(VarExpr('SORTED'), VarExpr('HEAD'), VarExpr('TAIL')), BifurcateStmt(VarExpr('HEAD'), VarExpr('INDEX'), VarExpr('VALUE')), PrintFunc([StringExpr('~d\\n'), VarExpr('VALUE')]), DebateStmt(UnaryArithExpr('!', VarExpr('TAIL')), Serialize([KillFunc(VarExpr('END'), [])], END), [])], END))], THIS), [UnlessStmt(None, Serialize([PrintFunc([StringExpr('Queue is empty.\\n')])], THIS))])], THIS)), UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(1)), Serialize([InputStmt(VarExpr('ITEM'), StringExpr('Integer to add :')), AggregateStmt(VarExpr('COUNT'), VarExpr('ITEM'), VarExpr('HEAD')), AggregateStmt(VarExpr('HEAD'), VarExpr('LIST'), VarExpr('LIST')), ReplicateStmt(VarExpr('COUNT'), BinaryExpr('+', VarExpr('COUNT'), IntExpr(1)))], THIS)), UnlessStmt(None, Serialize([PrintFunc([StringExpr('Invalid input.')])], THIS))])
TildeAthLoop(False, VarExpr('LOOP'), Serialize([PrintFunc([StringExpr('Select action:')]), PrintFunc([StringExpr('[1] Add an integer to the list')]), PrintFunc([StringExpr('[2] Sort and print list')]), PrintFunc([StringExpr('[3] Exit')]), InputStmt(VarExpr('CHOICE'), StringExpr('')), DebateStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(3)), Serialize([KillFunc(VarExpr('LOOP'), [])], LOOP), [UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(2)), Serialize([DebateStmt(VarExpr('LIST'), Serialize([ReplicateStmt(VarExpr('LIST'), ExecuteStmt([VarExpr('MERGESORT'), VarExpr('LIST')])), PrintFunc([StringExpr('List was successfully sorted.\\n')]), ReplicateStmt(VarExpr('SORTED'), VarExpr('LIST')), ProcreateStmt(VarExpr('END'), VarExpr('NULL')), TildeAthLoop(False, VarExpr('END'), Serialize([BifurcateStmt(VarExpr('SORTED'), VarExpr('HEAD'), VarExpr('TAIL')), BifurcateStmt(VarExpr('HEAD'), VarExpr('INDEX'), VarExpr('VALUE')), PrintFunc([StringExpr('~d\\n'), VarExpr('VALUE')]), DebateStmt(UnaryArithExpr('!', VarExpr('TAIL')), Serialize([KillFunc(VarExpr('END'), [])], END), [])], END))], LOOP), [UnlessStmt(None, Serialize([PrintFunc([StringExpr('Queue is empty.\\n')])], LOOP))])], LOOP)), UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(1)), Serialize([InputStmt(VarExpr('ITEM'), StringExpr('Integer to add :')), AggregateStmt(VarExpr('COUNT'), VarExpr('ITEM'), VarExpr('HEAD')), AggregateStmt(VarExpr('HEAD'), VarExpr('LIST'), VarExpr('LIST')), ReplicateStmt(VarExpr('COUNT'), BinaryExpr('+', VarExpr('COUNT'), IntExpr(1)))], LOOP)), UnlessStmt(None, Serialize([PrintFunc([StringExpr('Invalid input.')])], LOOP))])], LOOP))
KillFunc(VarExpr('THIS'), [])
Graft(Serialize([FabricateStmt(VarExpr('MERGESORT'), [VarExpr('LIST')], Serialize([PrintFunc([StringExpr('Merge sort algo start.\\n')]), ReplicateStmt(VarExpr('CURR'), VarExpr('LIST')), BifurcateStmt(VarExpr('CURR'), VarExpr('HEAD'), VarExpr('TAIL')), BifurcateStmt(VarExpr('HEAD'), VarExpr('INDEX'), VarExpr('VALUE')), DebateStmt(BinaryExpr('>', VarExpr('INDEX'), IntExpr(0)), Serialize([ProcreateStmt(VarExpr('LEFT'), VarExpr('NULL')), ProcreateStmt(VarExpr('RIGHT'), VarExpr('NULL')), ReplicateStmt(VarExpr('LENGTH'), BinaryExpr('/_', VarExpr('INDEX'), IntExpr(2))), ProcreateStmt(VarExpr('CNTL'), IntExpr(0)), ProcreateStmt(VarExpr('CNTR'), IntExpr(0)), ProcreateStmt(VarExpr('BLAH'), VarExpr('NULL')), TildeAthLoop(False, VarExpr('BLAH'), Serialize([BifurcateStmt(VarExpr('CURR'), VarExpr('HEAD'), VarExpr('TAIL')), BifurcateStmt(VarExpr('HEAD'), VarExpr('I'), VarExpr('VAL')), DebateStmt(BinaryExpr('<', VarExpr('I'), VarExpr('LENGTH')), Serialize([AggregateStmt(VarExpr('CNTL'), VarExpr('VAL'), VarExpr('NODE')), AggregateStmt(VarExpr('NODE'), VarExpr('LEFT'), VarExpr('LEFT')), ReplicateStmt(VarExpr('CNTL'), BinaryExpr('+', VarExpr('CNTL'), IntExpr(1)))], BLAH), [UnlessStmt(None, Serialize([AggregateStmt(VarExpr('CNTR'), VarExpr('VAL'), VarExpr('NODE')), AggregateStmt(VarExpr('NODE'), VarExpr('RIGHT'), VarExpr('RIGHT')), ReplicateStmt(VarExpr('CNTR'), BinaryExpr('+', VarExpr('CNTR'), IntExpr(1)))], BLAH))]), ReplicateStmt(VarExpr('CURR'), VarExpr('TAIL'))], BLAH)), PrintFunc([StringExpr('Split and recursed.\\n')]), ReplicateStmt(VarExpr('LEFT'), ExecuteStmt([VarExpr('MERGESORT'), VarExpr('LEFT')])), ReplicateStmt(VarExpr('RIGHT'), ExecuteStmt([VarExpr('MERGESORT'), VarExpr('RIGHT')])), AggregateStmt(VarExpr('LEFT'), VarExpr('RIGHT'), VarExpr('TOMERGE')), ReplicateStmt(VarExpr('SORTEDLIST'), ExecuteStmt([VarExpr('MERGE'), VarExpr('TOMERGE')])), PrintFunc([StringExpr('Going back now...\\n')]), DivulgateStmt(VarExpr('SORTEDLIST'))], THIS), [UnlessStmt(None, Serialize([PrintFunc([StringExpr('Lonely boi\\n')]), DivulgateStmt(VarExpr('CURR'))], THIS))])], THIS)), FabricateStmt(VarExpr('MERGE'), [VarExpr('LISTS')], Serialize([PrintFunc([StringExpr('Merging...\\n')]), ProcreateStmt(VarExpr('RESULT'), VarExpr('NULL')), ProcreateStmt(VarExpr('CTR'), IntExpr(0)), BifurcateStmt(VarExpr('LISTS'), VarExpr('LEFTY'), VarExpr('RIGHTY')), ReplicateStmt(VarExpr('CHECK'), BinaryExpr('&&', VarExpr('LEFTY'), VarExpr('RIGHTY'))), TildeAthLoop(False, VarExpr('CHECK'), Serialize([BifurcateStmt(VarExpr('LEFTY'), VarExpr('HEADL'), VarExpr('TAILL')), BifurcateStmt(VarExpr('HEADL'), VarExpr('X'), VarExpr('VALL')), BifurcateStmt(VarExpr('RIGHTY'), VarExpr('HEADR'), VarExpr('TAILR')), BifurcateStmt(VarExpr('HEADR'), VarExpr('Y'), VarExpr('VALR')), DebateStmt(BinaryExpr('>=', VarExpr('VALL'), VarExpr('VALR')), Serialize([AggregateStmt(VarExpr('CTR'), VarExpr('VALL'), VarExpr('ITEM')), ReplicateStmt(VarExpr('LEFTY'), VarExpr('TAILL'))], CHECK), [UnlessStmt(None, Serialize([AggregateStmt(VarExpr('CTR'), VarExpr('VALR'), VarExpr('ITEM')), ReplicateStmt(VarExpr('RIGHTY'), VarExpr('TAILR'))], CHECK))]), AggregateStmt(VarExpr('ITEM'), VarExpr('RESULT'), VarExpr('RESULT')), ReplicateStmt(VarExpr('CTR'), BinaryExpr('+', VarExpr('CTR'), IntExpr(1))), ReplicateStmt(VarExpr('CHECK'), BinaryExpr('&&', VarExpr('LEFTY'), VarExpr('RIGHTY')))], CHECK)), TildeAthLoop(False, VarExpr('LEFTY'), Serialize([BifurcateStmt(VarExpr('LEFTY'), VarExpr('HEADL'), VarExpr('TAILL')), BifurcateStmt(VarExpr('HEADL'), VarExpr('X'), VarExpr('VALL')), AggregateStmt(VarExpr('CTR'), VarExpr('VALL'), VarExpr('ITEM')), AggregateStmt(VarExpr('ITEM'), VarExpr('RESULT'), VarExpr('RESULT')), ReplicateStmt(VarExpr('CTR'), BinaryExpr('+', VarExpr('CTR'), IntExpr(1))), ReplicateStmt(VarExpr('LEFTY'), VarExpr('TAILL'))], LEFTY)), TildeAthLoop(False, VarExpr('RIGHTY'), Serialize([BifurcateStmt(VarExpr('RIGHTY'), VarExpr('HEADR'), VarExpr('TAILR')), BifurcateStmt(VarExpr('HEADR'), VarExpr('Y'), VarExpr('VALR')), AggregateStmt(VarExpr('CTR'), VarExpr('VALR'), VarExpr('ITEM')), AggregateStmt(VarExpr('ITEM'), VarExpr('RESULT'), VarExpr('RESULT')), ReplicateStmt(VarExpr('CTR'), BinaryExpr('+', VarExpr('CTR'), IntExpr(1))), ReplicateStmt(VarExpr('RIGHTY'), VarExpr('TAILR'))], RIGHTY)), PrintFunc([StringExpr('Merged!\\n')]), DivulgateStmt(VarExpr('RESULT'))], THIS)), ProcreateStmt(VarExpr('LOOP'), VarExpr('NULL')), ProcreateStmt(VarExpr('LIST'), VarExpr('NULL')), ProcreateStmt(VarExpr('COUNT'), IntExpr(0)), TildeAthLoop(False, VarExpr('LOOP'), Serialize([PrintFunc([StringExpr('Select action:')]), PrintFunc([StringExpr('[1] Add an integer to the list')]), PrintFunc([StringExpr('[2] Sort and print list')]), PrintFunc([StringExpr('[3] Exit')]), InputStmt(VarExpr('CHOICE'), StringExpr('')), DebateStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(3)), Serialize([KillFunc(VarExpr('LOOP'), [])], LOOP), [UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(2)), Serialize([DebateStmt(VarExpr('LIST'), Serialize([ReplicateStmt(VarExpr('LIST'), ExecuteStmt([VarExpr('MERGESORT'), VarExpr('LIST')])), PrintFunc([StringExpr('List was successfully sorted.\\n')]), ReplicateStmt(VarExpr('SORTED'), VarExpr('LIST')), ProcreateStmt(VarExpr('END'), VarExpr('NULL')), TildeAthLoop(False, VarExpr('END'), Serialize([BifurcateStmt(VarExpr('SORTED'), VarExpr('HEAD'), VarExpr('TAIL')), BifurcateStmt(VarExpr('HEAD'), VarExpr('INDEX'), VarExpr('VALUE')), PrintFunc([StringExpr('~d\\n'), VarExpr('VALUE')]), DebateStmt(UnaryArithExpr('!', VarExpr('TAIL')), Serialize([KillFunc(VarExpr('END'), [])], END), [])], END))], LOOP), [UnlessStmt(None, Serialize([PrintFunc([StringExpr('Queue is empty.\\n')])], LOOP))])], LOOP)), UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(1)), Serialize([InputStmt(VarExpr('ITEM'), StringExpr('Integer to add :')), AggregateStmt(VarExpr('COUNT'), VarExpr('ITEM'), VarExpr('HEAD')), AggregateStmt(VarExpr('HEAD'), VarExpr('LIST'), VarExpr('LIST')), ReplicateStmt(VarExpr('COUNT'), BinaryExpr('+', VarExpr('COUNT'), IntExpr(1)))], LOOP)), UnlessStmt(None, Serialize([PrintFunc([StringExpr('Invalid input.')])], LOOP))])], LOOP)), KillFunc(VarExpr('THIS'), [])], THIS), 642)
Select action:[1] Add an integer to the list[2] Sort and print list[3] ExitInteger to add :Select action:[1] Add an integer to the list[2] Sort and print list[3] ExitInteger to add :Select action:[1] Add an integer to the list[2] Sort and print list[3] ExitInteger to add :Select action:[1] Add an integer to the list[2] Sort and print list[3] ExitInteger to add :Select action:[1] Add an integer to the list[2] Sort and print list[3] ExitMerge sort algo start.
{'THIS': BuiltinSymbol(True, None, None), 'NULL': BuiltinSymbol(False, None, None), 'DIE': BuiltinSymbol(True, None, None), 'ATH': BuiltinSymbol(True, None, None), 'print': BuiltinSymbol(True, None, None), 'input': BuiltinSymbol(True, None, None), 'import': BuiltinSymbol(True, None, None), 'DEBATE': BuiltinSymbol(True, None, None), 'UNLESS': BuiltinSymbol(True, None, None), 'EXECUTE': BuiltinSymbol(True, None, None), 'DIVULGATE': BuiltinSymbol(True, None, None), 'FABRICATE': BuiltinSymbol(True, None, None), 'REPLICATE': BuiltinSymbol(True, None, None), 'PROCREATE': BuiltinSymbol(True, None, None), 'BIFURCATE': BuiltinSymbol(True, None, None), 'AGGREGATE': BuiltinSymbol(True, None, None), 'ENUMERATE': BuiltinSymbol(True, None, None), 'MERGESORT': AthSymbol(True, None, AthFunction('MERGESORT', [VarExpr('LIST')], Serialize([PrintFunc([StringExpr('Merge sort algo start.\\n')]), ReplicateStmt(VarExpr('CURR'), VarExpr('LIST')), BifurcateStmt(VarExpr('CURR'), VarExpr('HEAD'), VarExpr('TAIL')), BifurcateStmt(VarExpr('HEAD'), VarExpr('INDEX'), VarExpr('VALUE')), DebateStmt(BinaryExpr('>', VarExpr('INDEX'), IntExpr(0)), Serialize([ProcreateStmt(VarExpr('LEFT'), VarExpr('NULL')), ProcreateStmt(VarExpr('RIGHT'), VarExpr('NULL')), ReplicateStmt(VarExpr('LENGTH'), BinaryExpr('/_', VarExpr('INDEX'), IntExpr(2))), ProcreateStmt(VarExpr('CNTL'), IntExpr(0)), ProcreateStmt(VarExpr('CNTR'), IntExpr(0)), ProcreateStmt(VarExpr('BLAH'), VarExpr('NULL')), TildeAthLoop(False, VarExpr('BLAH'), Serialize([BifurcateStmt(VarExpr('CURR'), VarExpr('HEAD'), VarExpr('TAIL')), BifurcateStmt(VarExpr('HEAD'), VarExpr('I'), VarExpr('VAL')), DebateStmt(BinaryExpr('<', VarExpr('I'), VarExpr('LENGTH')), Serialize([AggregateStmt(VarExpr('CNTL'), VarExpr('VAL'), VarExpr('NODE')), AggregateStmt(VarExpr('NODE'), VarExpr('LEFT'), VarExpr('LEFT')), ReplicateStmt(VarExpr('CNTL'), BinaryExpr('+', VarExpr('CNTL'), IntExpr(1)))], BLAH), [UnlessStmt(None, Serialize([AggregateStmt(VarExpr('CNTR'), VarExpr('VAL'), VarExpr('NODE')), AggregateStmt(VarExpr('NODE'), VarExpr('RIGHT'), VarExpr('RIGHT')), ReplicateStmt(VarExpr('CNTR'), BinaryExpr('+', VarExpr('CNTR'), IntExpr(1)))], BLAH))]), ReplicateStmt(VarExpr('CURR'), VarExpr('TAIL'))], BLAH)), PrintFunc([StringExpr('Split and recursed.\\n')]), ReplicateStmt(VarExpr('LEFT'), ExecuteStmt([VarExpr('MERGESORT'), VarExpr('LEFT')])), ReplicateStmt(VarExpr('RIGHT'), ExecuteStmt([VarExpr('MERGESORT'), VarExpr('RIGHT')])), AggregateStmt(VarExpr('LEFT'), VarExpr('RIGHT'), VarExpr('TOMERGE')), ReplicateStmt(VarExpr('SORTEDLIST'), ExecuteStmt([VarExpr('MERGE'), VarExpr('TOMERGE')])), PrintFunc([StringExpr('Going back now...\\n')]), DivulgateStmt(VarExpr('SORTEDLIST'))], MERGESORT), [UnlessStmt(None, Serialize([PrintFunc([StringExpr('Lonely boi\\n')]), DivulgateStmt(VarExpr('CURR'))], MERGESORT))])], MERGESORT))), 'MERGE': AthSymbol(True, None, AthFunction('MERGE', [VarExpr('LISTS')], Serialize([PrintFunc([StringExpr('Merging...\\n')]), ProcreateStmt(VarExpr('RESULT'), VarExpr('NULL')), ProcreateStmt(VarExpr('CTR'), IntExpr(0)), BifurcateStmt(VarExpr('LISTS'), VarExpr('LEFTY'), VarExpr('RIGHTY')), ReplicateStmt(VarExpr('CHECK'), BinaryExpr('&&', VarExpr('LEFTY'), VarExpr('RIGHTY'))), TildeAthLoop(False, VarExpr('CHECK'), Serialize([BifurcateStmt(VarExpr('LEFTY'), VarExpr('HEADL'), VarExpr('TAILL')), BifurcateStmt(VarExpr('HEADL'), VarExpr('X'), VarExpr('VALL')), BifurcateStmt(VarExpr('RIGHTY'), VarExpr('HEADR'), VarExpr('TAILR')), BifurcateStmt(VarExpr('HEADR'), VarExpr('Y'), VarExpr('VALR')), DebateStmt(BinaryExpr('>=', VarExpr('VALL'), VarExpr('VALR')), Serialize([AggregateStmt(VarExpr('CTR'), VarExpr('VALL'), VarExpr('ITEM')), ReplicateStmt(VarExpr('LEFTY'), VarExpr('TAILL'))], CHECK), [UnlessStmt(None, Serialize([AggregateStmt(VarExpr('CTR'), VarExpr('VALR'), VarExpr('ITEM')), ReplicateStmt(VarExpr('RIGHTY'), VarExpr('TAILR'))], CHECK))]), AggregateStmt(VarExpr('ITEM'), VarExpr('RESULT'), VarExpr('RESULT')), ReplicateStmt(VarExpr('CTR'), BinaryExpr('+', VarExpr('CTR'), IntExpr(1))), ReplicateStmt(VarExpr('CHECK'), BinaryExpr('&&', VarExpr('LEFTY'), VarExpr('RIGHTY')))], CHECK)), TildeAthLoop(False, VarExpr('LEFTY'), Serialize([BifurcateStmt(VarExpr('LEFTY'), VarExpr('HEADL'), VarExpr('TAILL')), BifurcateStmt(VarExpr('HEADL'), VarExpr('X'), VarExpr('VALL')), AggregateStmt(VarExpr('CTR'), VarExpr('VALL'), VarExpr('ITEM')), AggregateStmt(VarExpr('ITEM'), VarExpr('RESULT'), VarExpr('RESULT')), ReplicateStmt(VarExpr('CTR'), BinaryExpr('+', VarExpr('CTR'), IntExpr(1))), ReplicateStmt(VarExpr('LEFTY'), VarExpr('TAILL'))], LEFTY)), TildeAthLoop(False, VarExpr('RIGHTY'), Serialize([BifurcateStmt(VarExpr('RIGHTY'), VarExpr('HEADR'), VarExpr('TAILR')), BifurcateStmt(VarExpr('HEADR'), VarExpr('Y'), VarExpr('VALR')), AggregateStmt(VarExpr('CTR'), VarExpr('VALR'), VarExpr('ITEM')), AggregateStmt(VarExpr('ITEM'), VarExpr('RESULT'), VarExpr('RESULT')), ReplicateStmt(VarExpr('CTR'), BinaryExpr('+', VarExpr('CTR'), IntExpr(1))), ReplicateStmt(VarExpr('RIGHTY'), VarExpr('TAILR'))], RIGHTY)), PrintFunc([StringExpr('Merged!\\n')]), DivulgateStmt(VarExpr('RESULT'))], MERGE))), 'LOOP': AthSymbol(True, None, None), 'LIST': AthSymbol(True, AthSymbol(True, AthSymbol(True, 3, None), AthSymbol(True, 5, None)), AthSymbol(True, AthSymbol(True, AthSymbol(True, 2, None), AthSymbol(True, 1, None)), AthSymbol(True, AthSymbol(True, AthSymbol(True, 1, None), AthSymbol(True, 2, None)), AthSymbol(True, AthSymbol(True, AthSymbol(True, 0, None), AthSymbol(True, 7, None)), AthSymbol(True, None, None))))), 'COUNT': AthSymbol(True, 0, None)}
{'CHOICE': AthSymbol(True, 2, None), 'ITEM': AthSymbol(True, 5, None), 'HEAD': AthSymbol(True, AthSymbol(True, 3, None), AthSymbol(True, 5, None)), 'LIST': AthSymbol(True, AthSymbol(True, AthSymbol(True, 3, None), AthSymbol(True, 5, None)), AthSymbol(True, AthSymbol(True, AthSymbol(True, 2, None), AthSymbol(True, 1, None)), AthSymbol(True, AthSymbol(True, AthSymbol(True, 1, None), AthSymbol(True, 2, None)), AthSymbol(True, AthSymbol(True, AthSymbol(True, 0, None), AthSymbol(True, 7, None)), AthSymbol(True, None, None))))), 'COUNT': AthSymbol(True, 4, None)}
{'LIST': AthSymbol(True, AthSymbol(True, AthSymbol(True, 3, None), AthSymbol(True, 5, None)), AthSymbol(True, AthSymbol(True, AthSymbol(True, 2, None), AthSymbol(True, 1, None)), AthSymbol(True, AthSymbol(True, AthSymbol(True, 1, None), AthSymbol(True, 2, None)), AthSymbol(True, AthSymbol(True, AthSymbol(True, 0, None), AthSymbol(True, 7, None)), AthSymbol(True, None, None))))), 'CURR': AthSymbol(True, AthSymbol(True, AthSymbol(True, 3, None), AthSymbol(True, 5, None)), AthSymbol(True, AthSymbol(True, AthSymbol(True, 2, None), AthSymbol(True, 1, None)), AthSymbol(True, AthSymbol(True, AthSymbol(True, 1, None), AthSymbol(True, 2, None)), AthSymbol(True, AthSymbol(True, AthSymbol(True, 0, None), AthSymbol(True, 7, None)), AthSymbol(True, None, None))))), 'HEAD': AthSymbol(True, AthSymbol(True, 3, None), AthSymbol(True, 5, None)), 'TAIL': AthSymbol(True, AthSymbol(True, AthSymbol(True, 2, None), AthSymbol(True, 1, None)), AthSymbol(True, AthSymbol(True, AthSymbol(True, 1, None), AthSymbol(True, 2, None)), AthSymbol(True, AthSymbol(True, AthSymbol(True, 0, None), AthSymbol(True, 7, None)), AthSymbol(True, None, None)))), 'INDEX': AthSymbol(True, 3, None), 'VALUE': AthSymbol(True, 5, None), 'LEFT': AthSymbol(True, AthSymbol(True, AthSymbol(True, 0, None), AthSymbol(True, 7, None)), AthSymbol(True, None, None)), 'RIGHT': AthSymbol(True, AthSymbol(True, AthSymbol(True, 2, None), AthSymbol(True, 2, None)), AthSymbol(True, AthSymbol(True, AthSymbol(True, 1, None), AthSymbol(True, 1, None)), AthSymbol(True, AthSymbol(True, AthSymbol(True, 0, None), AthSymbol(True, 5, None)), AthSymbol(True, None, None)))), 'LENGTH': AthSymbol(True, 1, None), 'CNTL': AthSymbol(True, 0, None), 'CNTR': AthSymbol(True, 0, None), 'BLAH': AthSymbol(True, None, None)}
{'HEAD': AthSymbol(False, None, None), 'TAIL': AthSymbol(False, None, None), 'I': AthSymbol(False, None, None), 'VAL': AthSymbol(False, None, None), 'NODE': AthSymbol(True, AthSymbol(True, 0, None), AthSymbol(True, 7, None)), 'RIGHT': AthSymbol(True, AthSymbol(True, AthSymbol(True, 2, None), AthSymbol(True, 2, None)), AthSymbol(True, AthSymbol(True, AthSymbol(True, 1, None), AthSymbol(True, 1, None)), AthSymbol(True, AthSymbol(True, AthSymbol(True, 0, None), AthSymbol(True, 5, None)), AthSymbol(True, None, None)))), 'CNTR': AthSymbol(True, 3, None), 'CURR': AthSymbol(True, None, None), 'LEFT': AthSymbol(True, AthSymbol(True, AthSymbol(True, 0, None), AthSymbol(True, 7, None)), AthSymbol(True, None, None)), 'CNTL': AthSymbol(True, 1, None)}

<--
	Input and traceback
	Code check: Implementability of complex alogrithms
	Status: FAILED
-->
1
7
1
2
1
1
1
5
2
Traceback (most recent call last):
  File "tildeath.py", line 156, in <module>
    ath_interp.interpret(cmdargs.script)
  File "tildeath.py", line 142, in interpret
    self.execute(result.value)
  File "tildeath.py", line 110, in execute
    script.eval(self)
  File "C:\Users\DELL PC\Desktop\Cel\discord.-ATH\athast.py", line 259, in eval
    stmt.eval(fsm)
  File "C:\Users\DELL PC\Desktop\Cel\discord.-ATH\athast.py", line 600, in eval
    self.body.eval(fsm)
  File "C:\Users\DELL PC\Desktop\Cel\discord.-ATH\athast.py", line 259, in eval
    stmt.eval(fsm)
  File "C:\Users\DELL PC\Desktop\Cel\discord.-ATH\athast.py", line 619, in eval
    unless.eval(fsm)
  File "C:\Users\DELL PC\Desktop\Cel\discord.-ATH\athast.py", line 636, in eval
    self.body.eval(fsm)
  File "C:\Users\DELL PC\Desktop\Cel\discord.-ATH\athast.py", line 259, in eval
    stmt.eval(fsm)
  File "C:\Users\DELL PC\Desktop\Cel\discord.-ATH\athast.py", line 615, in eval
    self.body.eval(fsm)
  File "C:\Users\DELL PC\Desktop\Cel\discord.-ATH\athast.py", line 259, in eval
    stmt.eval(fsm)
  File "C:\Users\DELL PC\Desktop\Cel\discord.-ATH\athast.py", line 278, in eval
    result = self.expr.eval(fsm)
  File "C:\Users\DELL PC\Desktop\Cel\discord.-ATH\athast.py", line 542, in eval
    return func.execute(fsm, arg_dict)
  File "C:\Users\DELL PC\Desktop\Cel\discord.-ATH\symbol.py", line 68, in execute
    stmt.eval(fsm)
  File "C:\Users\DELL PC\Desktop\Cel\discord.-ATH\athast.py", line 615, in eval
    self.body.eval(fsm)
  File "C:\Users\DELL PC\Desktop\Cel\discord.-ATH\athast.py", line 259, in eval
    stmt.eval(fsm)
  File "C:\Users\DELL PC\Desktop\Cel\discord.-ATH\athast.py", line 600, in eval
    self.body.eval(fsm)
  File "C:\Users\DELL PC\Desktop\Cel\discord.-ATH\athast.py", line 259, in eval
    stmt.eval(fsm)
  File "C:\Users\DELL PC\Desktop\Cel\discord.-ATH\athast.py", line 614, in eval
    if self.clause.eval(fsm):
  File "C:\Users\DELL PC\Desktop\Cel\discord.-ATH\athast.py", line 201, in eval
    result = self.ops[self.op](lval, rval)
  File "C:\Users\DELL PC\Desktop\Cel\discord.-ATH\symbol.py", line 123, in cmpop
    raise SymbolError('symbol left is not a value')
symbol.SymbolError: symbol left is not a value