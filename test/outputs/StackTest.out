ProcreateStmt(VarExpr('LOOP'), IntExpr(1))
ProcreateStmt(VarExpr('STACK'), VarExpr('NULL'))
StringExpr('Select action:\\n')
PrintFunc([StringExpr('Select action:\\n')])
StringExpr('[1] Add an item to stack\\n')
PrintFunc([StringExpr('[1] Add an item to stack\\n')])
StringExpr('[2] View stack\\n')
PrintFunc([StringExpr('[2] View stack\\n')])
StringExpr('[3] Exit\\n')
PrintFunc([StringExpr('[3] Exit\\n')])
InputStmt(VarExpr('CHOICE'), StringExpr(''))
KillFunc(VarExpr('LOOP'), [])
ProcreateStmt(VarExpr('BLAH'), IntExpr(0))
ReplicateStmt(VarExpr('TEMP'), VarExpr('STACK'))
BifurcateStmt(VarExpr('TEMP'), VarExpr('TEMP'), VarExpr('TAIL'))
StringExpr('~s\\n')
VarExpr('TAIL')
PrintFunc([StringExpr('~s\\n'), VarExpr('TAIL')])
KillFunc(VarExpr('BLAH'), [])
UnlessStmt(None, Serialize([KillFunc(VarExpr('BLAH'), [])], THIS))
DebateStmt(VarExpr('TEMP'), Serialize([PrintFunc([StringExpr('~s\\n'), VarExpr('TAIL')])], THIS), [UnlessStmt(None, Serialize([KillFunc(VarExpr('BLAH'), [])], THIS))])
TildeAthLoop(False, VarExpr('BLAH'), Serialize([BifurcateStmt(VarExpr('TEMP'), VarExpr('TEMP'), VarExpr('TAIL')), DebateStmt(VarExpr('TEMP'), Serialize([PrintFunc([StringExpr('~s\\n'), VarExpr('TAIL')])], BLAH), [UnlessStmt(None, Serialize([KillFunc(VarExpr('BLAH'), [])], BLAH))])], BLAH))
UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(2)), Serialize([ProcreateStmt(VarExpr('BLAH'), IntExpr(0)), ReplicateStmt(VarExpr('TEMP'), VarExpr('STACK')), TildeAthLoop(False, VarExpr('BLAH'), Serialize([BifurcateStmt(VarExpr('TEMP'), VarExpr('TEMP'), VarExpr('TAIL')), DebateStmt(VarExpr('TEMP'), Serialize([PrintFunc([StringExpr('~s\\n'), VarExpr('TAIL')])], BLAH), [UnlessStmt(None, Serialize([KillFunc(VarExpr('BLAH'), [])], BLAH))])], BLAH))], THIS))
InputStmt(VarExpr('ITEM'), StringExpr('Input string to add: '))
AggregateStmt(VarExpr('STACK'), VarExpr('ITEM'), VarExpr('STACK'))
UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(1)), Serialize([InputStmt(VarExpr('ITEM'), StringExpr('Input string to add: ')), AggregateStmt(VarExpr('STACK'), VarExpr('ITEM'), VarExpr('STACK'))], THIS))
StringExpr('Invalid input.')
PrintFunc([StringExpr('Invalid input.')])
UnlessStmt(None, Serialize([PrintFunc([StringExpr('Invalid input.')])], THIS))
DebateStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(3)), Serialize([KillFunc(VarExpr('LOOP'), [])], THIS), [UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(2)), Serialize([ProcreateStmt(VarExpr('BLAH'), IntExpr(0)), ReplicateStmt(VarExpr('TEMP'), VarExpr('STACK')), TildeAthLoop(False, VarExpr('BLAH'), Serialize([BifurcateStmt(VarExpr('TEMP'), VarExpr('TEMP'), VarExpr('TAIL')), DebateStmt(VarExpr('TEMP'), Serialize([PrintFunc([StringExpr('~s\\n'), VarExpr('TAIL')])], BLAH), [UnlessStmt(None, Serialize([KillFunc(VarExpr('BLAH'), [])], BLAH))])], BLAH))], THIS)), UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(1)), Serialize([InputStmt(VarExpr('ITEM'), StringExpr('Input string to add: ')), AggregateStmt(VarExpr('STACK'), VarExpr('ITEM'), VarExpr('STACK'))], THIS)), UnlessStmt(None, Serialize([PrintFunc([StringExpr('Invalid input.')])], THIS))])
TildeAthLoop(False, VarExpr('LOOP'), Serialize([PrintFunc([StringExpr('Select action:\\n')]), PrintFunc([StringExpr('[1] Add an item to stack\\n')]), PrintFunc([StringExpr('[2] View stack\\n')]), PrintFunc([StringExpr('[3] Exit\\n')]), InputStmt(VarExpr('CHOICE'), StringExpr('')), DebateStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(3)), Serialize([KillFunc(VarExpr('LOOP'), [])], LOOP), [UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(2)), Serialize([ProcreateStmt(VarExpr('BLAH'), IntExpr(0)), ReplicateStmt(VarExpr('TEMP'), VarExpr('STACK')), TildeAthLoop(False, VarExpr('BLAH'), Serialize([BifurcateStmt(VarExpr('TEMP'), VarExpr('TEMP'), VarExpr('TAIL')), DebateStmt(VarExpr('TEMP'), Serialize([PrintFunc([StringExpr('~s\\n'), VarExpr('TAIL')])], BLAH), [UnlessStmt(None, Serialize([KillFunc(VarExpr('BLAH'), [])], BLAH))])], BLAH))], LOOP)), UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(1)), Serialize([InputStmt(VarExpr('ITEM'), StringExpr('Input string to add: ')), AggregateStmt(VarExpr('STACK'), VarExpr('ITEM'), VarExpr('STACK'))], LOOP)), UnlessStmt(None, Serialize([PrintFunc([StringExpr('Invalid input.')])], LOOP))])], LOOP))
KillFunc(VarExpr('THIS'), [])
Graft(Serialize([ProcreateStmt(VarExpr('LOOP'), IntExpr(1)), ProcreateStmt(VarExpr('STACK'), VarExpr('NULL')), TildeAthLoop(False, VarExpr('LOOP'), Serialize([PrintFunc([StringExpr('Select action:\\n')]), PrintFunc([StringExpr('[1] Add an item to stack\\n')]), PrintFunc([StringExpr('[2] View stack\\n')]), PrintFunc([StringExpr('[3] Exit\\n')]), InputStmt(VarExpr('CHOICE'), StringExpr('')), DebateStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(3)), Serialize([KillFunc(VarExpr('LOOP'), [])], LOOP), [UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(2)), Serialize([ProcreateStmt(VarExpr('BLAH'), IntExpr(0)), ReplicateStmt(VarExpr('TEMP'), VarExpr('STACK')), TildeAthLoop(False, VarExpr('BLAH'), Serialize([BifurcateStmt(VarExpr('TEMP'), VarExpr('TEMP'), VarExpr('TAIL')), DebateStmt(VarExpr('TEMP'), Serialize([PrintFunc([StringExpr('~s\\n'), VarExpr('TAIL')])], BLAH), [UnlessStmt(None, Serialize([KillFunc(VarExpr('BLAH'), [])], BLAH))])], BLAH))], LOOP)), UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(1)), Serialize([InputStmt(VarExpr('ITEM'), StringExpr('Input string to add: ')), AggregateStmt(VarExpr('STACK'), VarExpr('ITEM'), VarExpr('STACK'))], LOOP)), UnlessStmt(None, Serialize([PrintFunc([StringExpr('Invalid input.')])], LOOP))])], LOOP)), KillFunc(VarExpr('THIS'), [])], THIS), 137)
Select action:
[1] Add an item to stack
[2] View stack
[3] Exit
Input string to add: Select action:
[1] Add an item to stack
[2] View stack
[3] Exit
Input string to add: Select action:
[1] Add an item to stack
[2] View stack
[3] Exit
Input string to add: Select action:
[1] Add an item to stack
[2] View stack
[3] Exit
Sollux
Tavros
Aradia
Select action:
[1] Add an item to stack
[2] View stack
[3] Exit
{'THIS': BuiltinSymbol(True, None, None), 'NULL': BuiltinSymbol(False, None, None), 'DIE': BuiltinSymbol(True, None, None), 'ATH': BuiltinSymbol(True, None, None), 'print': BuiltinSymbol(True, None, None), 'input': BuiltinSymbol(True, None, None), 'import': BuiltinSymbol(True, None, None), 'DEBATE': BuiltinSymbol(True, None, None), 'UNLESS': BuiltinSymbol(True, None, None), 'EXECUTE': BuiltinSymbol(True, None, None), 'DIVULGATE': BuiltinSymbol(True, None, None), 'FABRICATE': BuiltinSymbol(True, None, None), 'REPLICATE': BuiltinSymbol(True, None, None), 'PROCREATE': BuiltinSymbol(True, None, None), 'BIFURCATE': BuiltinSymbol(True, None, None), 'AGGREGATE': BuiltinSymbol(True, None, None), 'ENUMERATE': BuiltinSymbol(True, None, None), 'LOOP': AthSymbol(False, 1, None), 'STACK': AthSymbol(True, AthSymbol(True, AthSymbol(True, AthSymbol(True, None, None), AthSymbol(True, Aradia, None)), AthSymbol(True, Tavros, None)), AthSymbol(True, Sollux, None))}

<--
	Input
	Code check: Stack implementation
	Status: PASSED
-->