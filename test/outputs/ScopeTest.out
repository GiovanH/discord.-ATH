ProcreateStmt(VarExpr('B'), IntExpr(5))
ReplicateStmt(VarExpr('A'), BinaryExpr('+', VarExpr('B'), IntExpr(5)))
DivulgateStmt(VarExpr('A'))
FabricateStmt(VarExpr('FOO'), [], Serialize([ReplicateStmt(VarExpr('A'), BinaryExpr('+', VarExpr('B'), IntExpr(5))), DivulgateStmt(VarExpr('A'))], THIS))
ProcreateStmt(VarExpr('B'), IntExpr(2))
VarExpr('FOO')
ReplicateStmt(VarExpr('A'), ExecuteStmt([VarExpr('FOO')]))
DivulgateStmt(VarExpr('A'))
FabricateStmt(VarExpr('BAR'), [], Serialize([ProcreateStmt(VarExpr('B'), IntExpr(2)), ReplicateStmt(VarExpr('A'), ExecuteStmt([VarExpr('FOO')])), DivulgateStmt(VarExpr('A'))], THIS))
ProcreateStmt(VarExpr('LOOP'), IntExpr(1))
VarExpr('FOO')
ReplicateStmt(VarExpr('ANS'), ExecuteStmt([VarExpr('FOO')]))
StringExpr('Foo: ~d\\n')
VarExpr('ANS')
PrintFunc([StringExpr('Foo: ~d\\n'), VarExpr('ANS')])
VarExpr('BAR')
ReplicateStmt(VarExpr('ANS'), ExecuteStmt([VarExpr('BAR')]))
StringExpr('Bar: ~d\\n')
VarExpr('ANS')
PrintFunc([StringExpr('Bar: ~d\\n'), VarExpr('ANS')])
KillFunc(VarExpr('LOOP'), [])
TildeAthLoop(False, VarExpr('LOOP'), Serialize([ReplicateStmt(VarExpr('ANS'), ExecuteStmt([VarExpr('FOO')])), PrintFunc([StringExpr('Foo: ~d\\n'), VarExpr('ANS')]), ReplicateStmt(VarExpr('ANS'), ExecuteStmt([VarExpr('BAR')])), PrintFunc([StringExpr('Bar: ~d\\n'), VarExpr('ANS')]), KillFunc(VarExpr('LOOP'), [])], LOOP))
KillFunc(VarExpr('THIS'), [])
Graft(Serialize([ProcreateStmt(VarExpr('B'), IntExpr(5)), FabricateStmt(VarExpr('FOO'), [], Serialize([ReplicateStmt(VarExpr('A'), BinaryExpr('+', VarExpr('B'), IntExpr(5))), DivulgateStmt(VarExpr('A'))], THIS)), FabricateStmt(VarExpr('BAR'), [], Serialize([ProcreateStmt(VarExpr('B'), IntExpr(2)), ReplicateStmt(VarExpr('A'), ExecuteStmt([VarExpr('FOO')])), DivulgateStmt(VarExpr('A'))], THIS)), ProcreateStmt(VarExpr('LOOP'), IntExpr(1)), TildeAthLoop(False, VarExpr('LOOP'), Serialize([ReplicateStmt(VarExpr('ANS'), ExecuteStmt([VarExpr('FOO')])), PrintFunc([StringExpr('Foo: ~d\\n'), VarExpr('ANS')]), ReplicateStmt(VarExpr('ANS'), ExecuteStmt([VarExpr('BAR')])), PrintFunc([StringExpr('Bar: ~d\\n'), VarExpr('ANS')]), KillFunc(VarExpr('LOOP'), [])], LOOP)), KillFunc(VarExpr('THIS'), [])], THIS), 91)
Foo: 10
Bar: 7
{'THIS': BuiltinSymbol(True, None, None), 'NULL': BuiltinSymbol(False, None, None), 'DIE': BuiltinSymbol(True, None, None), 'ATH': BuiltinSymbol(True, None, None), 'print': BuiltinSymbol(True, None, None), 'input': BuiltinSymbol(True, None, None), 'import': BuiltinSymbol(True, None, None), 'DEBATE': BuiltinSymbol(True, None, None), 'UNLESS': BuiltinSymbol(True, None, None), 'EXECUTE': BuiltinSymbol(True, None, None), 'DIVULGATE': BuiltinSymbol(True, None, None), 'FABRICATE': BuiltinSymbol(True, None, None), 'REPLICATE': BuiltinSymbol(True, None, None), 'PROCREATE': BuiltinSymbol(True, None, None), 'BIFURCATE': BuiltinSymbol(True, None, None), 'AGGREGATE': BuiltinSymbol(True, None, None), 'ENUMERATE': BuiltinSymbol(True, None, None), 'B': AthSymbol(True, 5, None), 'FOO': AthSymbol(True, None, AthFunction('FOO', [], Serialize([ReplicateStmt(VarExpr('A'), BinaryExpr('+', VarExpr('B'), IntExpr(5))), DivulgateStmt(VarExpr('A'))], FOO))), 'BAR': AthSymbol(True, None, AthFunction('BAR', [], Serialize([ProcreateStmt(VarExpr('B'), IntExpr(2)), ReplicateStmt(VarExpr('A'), ExecuteStmt([VarExpr('FOO')])), DivulgateStmt(VarExpr('A'))], BAR))), 'LOOP': AthSymbol(False, 1, None)}

<--
	--
	Code check: Dynamic scope
	Status: PASSED
-->