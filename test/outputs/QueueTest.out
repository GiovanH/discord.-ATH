ProcreateStmt(VarExpr('LOOP'), IntExpr(1))
ProcreateStmt(VarExpr('QUEUE'), VarExpr('NULL'))
StringExpr('Select action:\\n')
PrintFunc([StringExpr('Select action:\\n')])
StringExpr('[1] Add an item to queue\\n')
PrintFunc([StringExpr('[1] Add an item to queue\\n')])
StringExpr('[2] View queue\\n')
PrintFunc([StringExpr('[2] View queue\\n')])
StringExpr('[3] Exit\\n')
PrintFunc([StringExpr('[3] Exit\\n')])
InputStmt(VarExpr('CHOICE'), StringExpr(''))
KillFunc(VarExpr('LOOP'), [])
ProcreateStmt(VarExpr('BLAH'), IntExpr(0))
ProcreateStmt(VarExpr('STACK'), VarExpr('NULL'))
ReplicateStmt(VarExpr('TEMP'), VarExpr('QUEUE'))
BifurcateStmt(VarExpr('TEMP'), VarExpr('HEAD'), VarExpr('TEMP'))
StringExpr('~s\\n')
VarExpr('HEAD')
PrintFunc([StringExpr('~s\\n'), VarExpr('HEAD')])
AggregateStmt(VarExpr('STACK'), VarExpr('HEAD'), VarExpr('STACK'))
KillFunc(VarExpr('BLAH'), [])
UnlessStmt(None, Serialize([KillFunc(VarExpr('BLAH'), [])], THIS))
DebateStmt(VarExpr('TEMP'), Serialize([PrintFunc([StringExpr('~s\\n'), VarExpr('HEAD')]), AggregateStmt(VarExpr('STACK'), VarExpr('HEAD'), VarExpr('STACK'))], THIS), [UnlessStmt(None, Serialize([KillFunc(VarExpr('BLAH'), [])], THIS))])
TildeAthLoop(False, VarExpr('BLAH'), Serialize([BifurcateStmt(VarExpr('TEMP'), VarExpr('HEAD'), VarExpr('TEMP')), DebateStmt(VarExpr('TEMP'), Serialize([PrintFunc([StringExpr('~s\\n'), VarExpr('HEAD')]), AggregateStmt(VarExpr('STACK'), VarExpr('HEAD'), VarExpr('STACK'))], BLAH), [UnlessStmt(None, Serialize([KillFunc(VarExpr('BLAH'), [])], BLAH))])], BLAH))
StringExpr('Stack print done.\\n')
PrintFunc([StringExpr('Stack print done.\\n')])
ProcreateStmt(VarExpr('OOF'), IntExpr(0))
BifurcateStmt(VarExpr('STACK'), VarExpr('STACK'), VarExpr('TAIL'))
StringExpr('I went oof.\\n')
PrintFunc([StringExpr('I went oof.\\n')])
StringExpr('~s\\n')
VarExpr('TAIL')
PrintFunc([StringExpr('~s\\n'), VarExpr('TAIL')])
KillFunc(VarExpr('OOF'), [])
UnlessStmt(None, Serialize([KillFunc(VarExpr('OOF'), [])], THIS))
DebateStmt(VarExpr('STACK'), Serialize([PrintFunc([StringExpr('~s\\n'), VarExpr('TAIL')])], THIS), [UnlessStmt(None, Serialize([KillFunc(VarExpr('OOF'), [])], THIS))])
TildeAthLoop(False, VarExpr('OOF'), Serialize([BifurcateStmt(VarExpr('STACK'), VarExpr('STACK'), VarExpr('TAIL')), PrintFunc([StringExpr('I went oof.\\n')]), DebateStmt(VarExpr('STACK'), Serialize([PrintFunc([StringExpr('~s\\n'), VarExpr('TAIL')])], OOF), [UnlessStmt(None, Serialize([KillFunc(VarExpr('OOF'), [])], OOF))])], OOF))
StringExpr('Queue print done.\\n')
PrintFunc([StringExpr('Queue print done.\\n')])
UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(2)), Serialize([ProcreateStmt(VarExpr('BLAH'), IntExpr(0)), ProcreateStmt(VarExpr('STACK'), VarExpr('NULL')), ReplicateStmt(VarExpr('TEMP'), VarExpr('QUEUE')), TildeAthLoop(False, VarExpr('BLAH'), Serialize([BifurcateStmt(VarExpr('TEMP'), VarExpr('HEAD'), VarExpr('TEMP')), DebateStmt(VarExpr('TEMP'), Serialize([PrintFunc([StringExpr('~s\\n'), VarExpr('HEAD')]), AggregateStmt(VarExpr('STACK'), VarExpr('HEAD'), VarExpr('STACK'))], BLAH), [UnlessStmt(None, Serialize([KillFunc(VarExpr('BLAH'), [])], BLAH))])], BLAH)), PrintFunc([StringExpr('Stack print done.\\n')]), ProcreateStmt(VarExpr('OOF'), IntExpr(0)), TildeAthLoop(False, VarExpr('OOF'), Serialize([BifurcateStmt(VarExpr('STACK'), VarExpr('STACK'), VarExpr('TAIL')), PrintFunc([StringExpr('I went oof.\\n')]), DebateStmt(VarExpr('STACK'), Serialize([PrintFunc([StringExpr('~s\\n'), VarExpr('TAIL')])], OOF), [UnlessStmt(None, Serialize([KillFunc(VarExpr('OOF'), [])], OOF))])], OOF)), PrintFunc([StringExpr('Queue print done.\\n')])], THIS))
InputStmt(VarExpr('ITEM'), StringExpr('Input string to add: '))
AggregateStmt(VarExpr('ITEM'), VarExpr('QUEUE'), VarExpr('QUEUE'))
UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(1)), Serialize([InputStmt(VarExpr('ITEM'), StringExpr('Input string to add: ')), AggregateStmt(VarExpr('ITEM'), VarExpr('QUEUE'), VarExpr('QUEUE'))], THIS))
StringExpr('Invalid input.')
PrintFunc([StringExpr('Invalid input.')])
UnlessStmt(None, Serialize([PrintFunc([StringExpr('Invalid input.')])], THIS))
DebateStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(3)), Serialize([KillFunc(VarExpr('LOOP'), [])], THIS), [UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(2)), Serialize([ProcreateStmt(VarExpr('BLAH'), IntExpr(0)), ProcreateStmt(VarExpr('STACK'), VarExpr('NULL')), ReplicateStmt(VarExpr('TEMP'), VarExpr('QUEUE')), TildeAthLoop(False, VarExpr('BLAH'), Serialize([BifurcateStmt(VarExpr('TEMP'), VarExpr('HEAD'), VarExpr('TEMP')), DebateStmt(VarExpr('TEMP'), Serialize([PrintFunc([StringExpr('~s\\n'), VarExpr('HEAD')]), AggregateStmt(VarExpr('STACK'), VarExpr('HEAD'), VarExpr('STACK'))], BLAH), [UnlessStmt(None, Serialize([KillFunc(VarExpr('BLAH'), [])], BLAH))])], BLAH)), PrintFunc([StringExpr('Stack print done.\\n')]), ProcreateStmt(VarExpr('OOF'), IntExpr(0)), TildeAthLoop(False, VarExpr('OOF'), Serialize([BifurcateStmt(VarExpr('STACK'), VarExpr('STACK'), VarExpr('TAIL')), PrintFunc([StringExpr('I went oof.\\n')]), DebateStmt(VarExpr('STACK'), Serialize([PrintFunc([StringExpr('~s\\n'), VarExpr('TAIL')])], OOF), [UnlessStmt(None, Serialize([KillFunc(VarExpr('OOF'), [])], OOF))])], OOF)), PrintFunc([StringExpr('Queue print done.\\n')])], THIS)), UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(1)), Serialize([InputStmt(VarExpr('ITEM'), StringExpr('Input string to add: ')), AggregateStmt(VarExpr('ITEM'), VarExpr('QUEUE'), VarExpr('QUEUE'))], THIS)), UnlessStmt(None, Serialize([PrintFunc([StringExpr('Invalid input.')])], THIS))])
TildeAthLoop(False, VarExpr('LOOP'), Serialize([PrintFunc([StringExpr('Select action:\\n')]), PrintFunc([StringExpr('[1] Add an item to queue\\n')]), PrintFunc([StringExpr('[2] View queue\\n')]), PrintFunc([StringExpr('[3] Exit\\n')]), InputStmt(VarExpr('CHOICE'), StringExpr('')), DebateStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(3)), Serialize([KillFunc(VarExpr('LOOP'), [])], LOOP), [UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(2)), Serialize([ProcreateStmt(VarExpr('BLAH'), IntExpr(0)), ProcreateStmt(VarExpr('STACK'), VarExpr('NULL')), ReplicateStmt(VarExpr('TEMP'), VarExpr('QUEUE')), TildeAthLoop(False, VarExpr('BLAH'), Serialize([BifurcateStmt(VarExpr('TEMP'), VarExpr('HEAD'), VarExpr('TEMP')), DebateStmt(VarExpr('TEMP'), Serialize([PrintFunc([StringExpr('~s\\n'), VarExpr('HEAD')]), AggregateStmt(VarExpr('STACK'), VarExpr('HEAD'), VarExpr('STACK'))], BLAH), [UnlessStmt(None, Serialize([KillFunc(VarExpr('BLAH'), [])], BLAH))])], BLAH)), PrintFunc([StringExpr('Stack print done.\\n')]), ProcreateStmt(VarExpr('OOF'), IntExpr(0)), TildeAthLoop(False, VarExpr('OOF'), Serialize([BifurcateStmt(VarExpr('STACK'), VarExpr('STACK'), VarExpr('TAIL')), PrintFunc([StringExpr('I went oof.\\n')]), DebateStmt(VarExpr('STACK'), Serialize([PrintFunc([StringExpr('~s\\n'), VarExpr('TAIL')])], OOF), [UnlessStmt(None, Serialize([KillFunc(VarExpr('OOF'), [])], OOF))])], OOF)), PrintFunc([StringExpr('Queue print done.\\n')])], LOOP)), UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(1)), Serialize([InputStmt(VarExpr('ITEM'), StringExpr('Input string to add: ')), AggregateStmt(VarExpr('ITEM'), VarExpr('QUEUE'), VarExpr('QUEUE'))], LOOP)), UnlessStmt(None, Serialize([PrintFunc([StringExpr('Invalid input.')])], LOOP))])], LOOP))
KillFunc(VarExpr('THIS'), [])
Graft(Serialize([ProcreateStmt(VarExpr('LOOP'), IntExpr(1)), ProcreateStmt(VarExpr('QUEUE'), VarExpr('NULL')), TildeAthLoop(False, VarExpr('LOOP'), Serialize([PrintFunc([StringExpr('Select action:\\n')]), PrintFunc([StringExpr('[1] Add an item to queue\\n')]), PrintFunc([StringExpr('[2] View queue\\n')]), PrintFunc([StringExpr('[3] Exit\\n')]), InputStmt(VarExpr('CHOICE'), StringExpr('')), DebateStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(3)), Serialize([KillFunc(VarExpr('LOOP'), [])], LOOP), [UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(2)), Serialize([ProcreateStmt(VarExpr('BLAH'), IntExpr(0)), ProcreateStmt(VarExpr('STACK'), VarExpr('NULL')), ReplicateStmt(VarExpr('TEMP'), VarExpr('QUEUE')), TildeAthLoop(False, VarExpr('BLAH'), Serialize([BifurcateStmt(VarExpr('TEMP'), VarExpr('HEAD'), VarExpr('TEMP')), DebateStmt(VarExpr('TEMP'), Serialize([PrintFunc([StringExpr('~s\\n'), VarExpr('HEAD')]), AggregateStmt(VarExpr('STACK'), VarExpr('HEAD'), VarExpr('STACK'))], BLAH), [UnlessStmt(None, Serialize([KillFunc(VarExpr('BLAH'), [])], BLAH))])], BLAH)), PrintFunc([StringExpr('Stack print done.\\n')]), ProcreateStmt(VarExpr('OOF'), IntExpr(0)), TildeAthLoop(False, VarExpr('OOF'), Serialize([BifurcateStmt(VarExpr('STACK'), VarExpr('STACK'), VarExpr('TAIL')), PrintFunc([StringExpr('I went oof.\\n')]), DebateStmt(VarExpr('STACK'), Serialize([PrintFunc([StringExpr('~s\\n'), VarExpr('TAIL')])], OOF), [UnlessStmt(None, Serialize([KillFunc(VarExpr('OOF'), [])], OOF))])], OOF)), PrintFunc([StringExpr('Queue print done.\\n')])], LOOP)), UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(1)), Serialize([InputStmt(VarExpr('ITEM'), StringExpr('Input string to add: ')), AggregateStmt(VarExpr('ITEM'), VarExpr('QUEUE'), VarExpr('QUEUE'))], LOOP)), UnlessStmt(None, Serialize([PrintFunc([StringExpr('Invalid input.')])], LOOP))])], LOOP)), KillFunc(VarExpr('THIS'), [])], THIS), 205)
Select action:
[1] Add an item to queue
[2] View queue
[3] Exit
Input string to add: Select action:
[1] Add an item to queue
[2] View queue
[3] Exit
Input string to add: Select action:
[1] Add an item to queue
[2] View queue
[3] Exit
Input string to add: Select action:
[1] Add an item to queue
[2] View queue
[3] Exit
Sollux
Tavros
Aradia
Stack print done.
I went oof.
Aradia
I went oof.
Tavros
I went oof.
Sollux
I went oof.
Queue print done.
Select action:
[1] Add an item to queue
[2] View queue
[3] Exit
{'THIS': BuiltinSymbol(True, None, None), 'NULL': BuiltinSymbol(False, None, None), 'DIE': BuiltinSymbol(True, None, None), 'ATH': BuiltinSymbol(True, None, None), 'print': BuiltinSymbol(True, None, None), 'input': BuiltinSymbol(True, None, None), 'import': BuiltinSymbol(True, None, None), 'DEBATE': BuiltinSymbol(True, None, None), 'UNLESS': BuiltinSymbol(True, None, None), 'EXECUTE': BuiltinSymbol(True, None, None), 'DIVULGATE': BuiltinSymbol(True, None, None), 'FABRICATE': BuiltinSymbol(True, None, None), 'REPLICATE': BuiltinSymbol(True, None, None), 'PROCREATE': BuiltinSymbol(True, None, None), 'BIFURCATE': BuiltinSymbol(True, None, None), 'AGGREGATE': BuiltinSymbol(True, None, None), 'ENUMERATE': BuiltinSymbol(True, None, None), 'LOOP': AthSymbol(False, 1, None), 'QUEUE': AthSymbol(True, AthSymbol(True, Sollux, None), AthSymbol(True, AthSymbol(True, Tavros, None), AthSymbol(True, AthSymbol(True, Aradia, None), AthSymbol(True, None, None))))}

<--
	Input
	Code check: Queue implementation
	Status: PASSED
-->
1
Aradia
1
Tavros
1
Sollux
2
3