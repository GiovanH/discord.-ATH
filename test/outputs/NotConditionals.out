ProcreateStmt(VarExpr('LOOP'), IntExpr(0))
InputStmt(VarExpr('RATE'), StringExpr('On a scale of A to AAAAA, how do you rate your suffering? '))
EnumerateStmt(VarExpr('RATE'), VarExpr('RATE'))
ProcreateStmt(VarExpr('A'), IntExpr(0))
ProcreateStmt(VarExpr('B'), IntExpr(0))
ProcreateStmt(VarExpr('C'), IntExpr(0))
ProcreateStmt(VarExpr('D'), IntExpr(0))
ProcreateStmt(VarExpr('E'), IntExpr(0))
ProcreateStmt(VarExpr('F'), IntExpr(0))
BifurcateStmt(VarExpr('RATE'), VarExpr('RATE'), VarExpr('END'))
KillFunc(VarExpr('A'), [])
BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END'))
KillFunc(VarExpr('B'), [])
BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END'))
KillFunc(VarExpr('C'), [])
BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END'))
KillFunc(VarExpr('D'), [])
BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END'))
KillFunc(VarExpr('E'), [])
BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END'))
KillFunc(VarExpr('F'), [])
BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END'))
TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('F'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END'))], END))
TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('E'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('F'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END'))], END))], END))
TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('D'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('E'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('F'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END'))], END))], END))], END))
TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('C'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('D'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('E'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('F'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END'))], END))], END))], END))], END))
TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('B'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('C'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('D'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('E'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('F'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END'))], END))], END))], END))], END))], END))
TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('A'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('B'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('C'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('D'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('E'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('F'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END'))], END))], END))], END))], END))], END))], END))
StringExpr('Aw, you wee bab. Do you want me to kiss your booboos away?')
PrintFunc([StringExpr('Aw, you wee bab. Do you want me to kiss your booboos away?')])
StringExpr('Fortify!')
PrintFunc([StringExpr('Fortify!')])
UnlessStmt(VarExpr('B'), Serialize([PrintFunc([StringExpr('Fortify!')])], THIS))
StringExpr(':wackyZany:')
PrintFunc([StringExpr(':wackyZany:')])
UnlessStmt(VarExpr('C'), Serialize([PrintFunc([StringExpr(':wackyZany:')])], THIS))
StringExpr('Have you tried mixing coffee and energy drinks yet.')
PrintFunc([StringExpr('Have you tried mixing coffee and energy drinks yet.')])
UnlessStmt(VarExpr('D'), Serialize([PrintFunc([StringExpr('Have you tried mixing coffee and energy drinks yet.')])], THIS))
StringExpr('Same.')
PrintFunc([StringExpr('Same.')])
UnlessStmt(VarExpr('E'), Serialize([PrintFunc([StringExpr('Same.')])], THIS))
StringExpr("You're overreacting. Calm your shit.")
PrintFunc([StringExpr("You're overreacting. Calm your shit.")])
UnlessStmt(None, Serialize([PrintFunc([StringExpr("You're overreacting. Calm your shit.")])], THIS))
DebateStmt(VarExpr('A'), Serialize([PrintFunc([StringExpr('Aw, you wee bab. Do you want me to kiss your booboos away?')])], THIS), [UnlessStmt(VarExpr('B'), Serialize([PrintFunc([StringExpr('Fortify!')])], THIS)), UnlessStmt(VarExpr('C'), Serialize([PrintFunc([StringExpr(':wackyZany:')])], THIS)), UnlessStmt(VarExpr('D'), Serialize([PrintFunc([StringExpr('Have you tried mixing coffee and energy drinks yet.')])], THIS)), UnlessStmt(VarExpr('E'), Serialize([PrintFunc([StringExpr('Same.')])], THIS)), UnlessStmt(None, Serialize([PrintFunc([StringExpr("You're overreacting. Calm your shit.")])], THIS))])
StringExpr('\\n')
PrintFunc([StringExpr('\\n')])
UnaryArithExpr('-', IntExpr(1))
InspectStack([UnaryArithExpr('-', IntExpr(1))])
KillFunc(VarExpr('LOOP'), [])
TildeAthLoop(False, VarExpr('LOOP'), Serialize([InputStmt(VarExpr('RATE'), StringExpr('On a scale of A to AAAAA, how do you rate your suffering? ')), EnumerateStmt(VarExpr('RATE'), VarExpr('RATE')), ProcreateStmt(VarExpr('A'), IntExpr(0)), ProcreateStmt(VarExpr('B'), IntExpr(0)), ProcreateStmt(VarExpr('C'), IntExpr(0)), ProcreateStmt(VarExpr('D'), IntExpr(0)), ProcreateStmt(VarExpr('E'), IntExpr(0)), ProcreateStmt(VarExpr('F'), IntExpr(0)), BifurcateStmt(VarExpr('RATE'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('A'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('B'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('C'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('D'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('E'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('F'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END'))], END))], END))], END))], END))], END))], END)), DebateStmt(VarExpr('A'), Serialize([PrintFunc([StringExpr('Aw, you wee bab. Do you want me to kiss your booboos away?')])], LOOP), [UnlessStmt(VarExpr('B'), Serialize([PrintFunc([StringExpr('Fortify!')])], LOOP)), UnlessStmt(VarExpr('C'), Serialize([PrintFunc([StringExpr(':wackyZany:')])], LOOP)), UnlessStmt(VarExpr('D'), Serialize([PrintFunc([StringExpr('Have you tried mixing coffee and energy drinks yet.')])], LOOP)), UnlessStmt(VarExpr('E'), Serialize([PrintFunc([StringExpr('Same.')])], LOOP)), UnlessStmt(None, Serialize([PrintFunc([StringExpr("You're overreacting. Calm your shit.")])], LOOP))]), PrintFunc([StringExpr('\\n')]), InspectStack([UnaryArithExpr('-', IntExpr(1))]), KillFunc(VarExpr('LOOP'), [])], LOOP))
KillFunc(VarExpr('THIS'), [])
Graft(Serialize([ProcreateStmt(VarExpr('LOOP'), IntExpr(0)), TildeAthLoop(False, VarExpr('LOOP'), Serialize([InputStmt(VarExpr('RATE'), StringExpr('On a scale of A to AAAAA, how do you rate your suffering? ')), EnumerateStmt(VarExpr('RATE'), VarExpr('RATE')), ProcreateStmt(VarExpr('A'), IntExpr(0)), ProcreateStmt(VarExpr('B'), IntExpr(0)), ProcreateStmt(VarExpr('C'), IntExpr(0)), ProcreateStmt(VarExpr('D'), IntExpr(0)), ProcreateStmt(VarExpr('E'), IntExpr(0)), ProcreateStmt(VarExpr('F'), IntExpr(0)), BifurcateStmt(VarExpr('RATE'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('A'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('B'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('C'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('D'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('E'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END')), TildeAthLoop(False, VarExpr('END'), Serialize([KillFunc(VarExpr('F'), []), BifurcateStmt(VarExpr('END'), VarExpr('RATE'), VarExpr('END'))], END))], END))], END))], END))], END))], END)), DebateStmt(VarExpr('A'), Serialize([PrintFunc([StringExpr('Aw, you wee bab. Do you want me to kiss your booboos away?')])], LOOP), [UnlessStmt(VarExpr('B'), Serialize([PrintFunc([StringExpr('Fortify!')])], LOOP)), UnlessStmt(VarExpr('C'), Serialize([PrintFunc([StringExpr(':wackyZany:')])], LOOP)), UnlessStmt(VarExpr('D'), Serialize([PrintFunc([StringExpr('Have you tried mixing coffee and energy drinks yet.')])], LOOP)), UnlessStmt(VarExpr('E'), Serialize([PrintFunc([StringExpr('Same.')])], LOOP)), UnlessStmt(None, Serialize([PrintFunc([StringExpr("You're overreacting. Calm your shit.")])], LOOP))]), PrintFunc([StringExpr('\\n')]), InspectStack([UnaryArithExpr('-', IntExpr(1))]), KillFunc(VarExpr('LOOP'), [])], LOOP)), KillFunc(VarExpr('THIS'), [])], THIS), 256)
On a scale of A to AAAAA, how do you rate your suffering? :wackyZany:
{'RATE': AthSymbol(True, A, None), 'A': AthSymbol(False, 0, None), 'B': AthSymbol(False, 0, None), 'C': AthSymbol(True, 0, None), 'D': AthSymbol(True, 0, None), 'E': AthSymbol(True, 0, None), 'F': AthSymbol(True, 0, None), 'END': AthSymbol(True, A, AthSymbol(True, A, AthSymbol(False, None, None)))}
{'THIS': BuiltinSymbol(True, None, None), 'NULL': BuiltinSymbol(False, None, None), 'DIE': BuiltinSymbol(True, None, None), 'ATH': BuiltinSymbol(True, None, None), 'print': BuiltinSymbol(True, None, None), 'input': BuiltinSymbol(True, None, None), 'import': BuiltinSymbol(True, None, None), 'DEBATE': BuiltinSymbol(True, None, None), 'UNLESS': BuiltinSymbol(True, None, None), 'EXECUTE': BuiltinSymbol(True, None, None), 'DIVULGATE': BuiltinSymbol(True, None, None), 'FABRICATE': BuiltinSymbol(True, None, None), 'REPLICATE': BuiltinSymbol(True, None, None), 'PROCREATE': BuiltinSymbol(True, None, None), 'BIFURCATE': BuiltinSymbol(True, None, None), 'AGGREGATE': BuiltinSymbol(True, None, None), 'ENUMERATE': BuiltinSymbol(True, None, None), 'LOOP': AthSymbol(False, 0, None)}

<--
	Input
	Code check: ENUMERATE, conditional workaround logic
	Status: PASSED
-->