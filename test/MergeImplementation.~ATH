//Why? Because I'm insane, that's why.
//There's probably something wrong with this somewhere

FABRICATE MERGESORT (LIST) {
	print ("Merge sort algo start.\n");
	INSPECT (-1);
	REPLICATE CURR LIST;
	BIFURCATE CURR[HEAD, TAIL];
	
	BIFURCATE HEAD[INDEX, VALUE];
	DEBATE (INDEX > 0) {
		PROCREATE LEFT NULL;
		PROCREATE RIGHT NULL;
		
		REPLICATE LENGTH ((INDEX + 1) /_ 2);
		PROCREATE CNTL 0;
		PROCREATE CNTR 0;
		PROCREATE BLAH 0;
		~ATH(BLAH) {
			BIFURCATE CURR[HEAD, TAIL];
			BIFURCATE HEAD[I, VAL];
			DEBATE (I < LENGTH) {
				AGGREGATE [CNTL, VAL]NODE;
				AGGREGATE [NODE, LEFT]LEFT;
				REPLICATE CNTL (CNTL + 1);
			} UNLESS {
				AGGREGATE [CNTR, VAL]NODE;
				AGGREGATE [NODE, RIGHT]RIGHT;
				REPLICATE CNTR (CNTR + 1);
			}
			REPLICATE CURR TAIL;
			DEBATE (!CURR) {
				BLAH.DIE();
			}
		}
		//Current error is somewhere before this line
		print ("Split and recursed.\n");
		
		REPLICATE LEFT EXECUTE (MERGESORT, LEFT);
		REPLICATE RIGHT EXECUTE (MERGESORT, RIGHT);
		AGGREGATE [LEFT, RIGHT]TOMERGE;
		REPLICATE SORTEDLIST EXECUTE (MERGE, TOMERGE);
		print ("Going back now...\n");
		DIVULGATE SORTEDLIST;
	} UNLESS {
		print ("Lonely boi\n");
		DIVULGATE CURR;
	}
}

FABRICATE MERGE (LISTS) {
	print ("Merging...\n");
	PROCREATE RESULT NULL;
	PROCREATE CTR 0;

	BIFURCATE LISTS[LEFTY, RIGHTY];
	REPLICATE CHECK (LEFTY && RIGHTY);
	/*
		Logic check:
		We need the following loop to stop when at least one of the
		lists, LEFTY or RIGHTY, is dead.
		0, 0 should return dead
		0, 1 should return dead
		1, 0 should return dead
		1, 1 should return alive
	*/
	~ATH(CHECK) {
		BIFURCATE LEFTY[HEADL, TAILL];
		BIFURCATE HEADL[X, VALL];
		
		BIFURCATE RIGHTY[HEADR, TAILR];
		BIFURCATE HEADR[Y, VALR];
		
		DEBATE (VALL >= VALR) {
			AGGREGATE [CTR, VALL]ITEM;
			REPLICATE LEFTY TAILL;
		} UNLESS {
			AGGREGATE [CTR, VALR]ITEM;
			REPLICATE RIGHTY TAILR;
		}
		AGGREGATE [ITEM, RESULT]RESULT;
		REPLICATE CTR (CTR + 1);
		REPLICATE CHECK (LEFTY && RIGHTY);
	}
	
	//Only one of these will be entered
	~ATH(LEFTY) {
		BIFURCATE LEFTY[HEADL, TAILL];
		BIFURCATE HEADL[X, VALL];
		AGGREGATE [CTR, VALL]ITEM;
		AGGREGATE [ITEM, RESULT]RESULT;
		REPLICATE CTR (CTR + 1);
		REPLICATE LEFTY TAILL;
	}
	~ATH(RIGHTY) {
		BIFURCATE RIGHTY[HEADR, TAILR];
		BIFURCATE HEADR[Y, VALR];
		AGGREGATE [CTR, VALR]ITEM;
		AGGREGATE [ITEM, RESULT]RESULT;
		REPLICATE CTR (CTR + 1);
		REPLICATE RIGHTY TAILR;
	}
	
	print("Merged!\n");
	DIVULGATE RESULT;
}

PROCREATE LOOP;
PROCREATE LIST NULL;
PROCREATE COUNT 0;
~ATH(LOOP) {
	print ("Select action:\n");
	print ("[1] Add an integer to the list\n");
	print ("[2] Sort and print list\n");
	print ("[3] Exit\n");
	input CHOICE "";
	
	DEBATE (CHOICE == 3) {
		LOOP.DIE();
	} UNLESS (CHOICE == 2) {
		DEBATE (LIST) {
			REPLICATE LIST EXECUTE (MERGESORT, LIST);
			print("List was successfully sorted.\n");
			// MergeImplementation is written so it sorts the values in
			// decreasing order to make it easier to print
			REPLICATE SORTED LIST;
			
			PROCREATE END;
			~ATH(END) {
				BIFURCATE SORTED[HEAD, TAIL];
				BIFURCATE HEAD[INDEX, VALUE];
				print ("~d\n", VALUE);
				DEBATE (!TAIL) {
					END.DIE();
				}
			}
		} UNLESS {
			print ("Queue is empty.\n");
		}
	} UNLESS (CHOICE == 1) {
		input ITEM "Integer to add :";
		AGGREGATE [COUNT, ITEM]HEAD;
		AGGREGATE [HEAD, LIST]LIST;
		REPLICATE COUNT (COUNT + 1);
	} UNLESS {
		print ("Invalid input.");
	}
}
THIS.DIE();