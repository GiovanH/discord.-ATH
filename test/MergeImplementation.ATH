//Why? Because I'm insane, that's why.
//There's probably something wrong with this somewhere

FABRICATE MERGESORT (LIST) {
	REPLICATE CURR LIST;
	BIFURCATE CURR[HEAD, TAIL];
	
	BIFURCATE HEAD[INDEX, VALUE];
	WHEN (INDEX > 0) {
		PROCREATE LEFT NULL;
		PROCREATE RIGHT NULL;
		
		REPLICATE LENGTH (INDEX /_ 2);
		PROCREATE CNTL 0;
		PROCREATE CNTR 0;
		PROCREATE BLAH;
		~ATH(BLAH) {
			BIFURCATE CURR[HEAD, TAIL];
			BIFURCATE HEAD[I, VAL];
			WHEN (I < LENGTH) {
				AGGREGATE [CNTL, VAL]NODE;
				AGGREGATE [NODE, LEFT]LEFT;
				CNTL += 1;
			} UNLESS {
				AGGREGATE [CNTR, VAL]NODE;
				AGGREGATE [NODE, RIGHT]RIGHT;
				CNTR += 1;
			}
			REPLICATE CURR TAIL;
		}
		
		REPLICATE LEFT EXECUTE(MERGESORT, LEFT);
		REPLICATE RIGHT EXECUTE(MERGESORT, RIGHT);
		AGGREGATE [LEFT, RIGHT]TOMERGE;
		REPLICATE SORTEDLIST EXECUTE(MERGE, TOMERGE);
		DIVULGATE SORTEDLIST;
	} UNLESS {
		DIVULGATE CURR;
	}
}

FABRICATE MERGE (LISTS) {
	PROCREATE RESULT NULL;
	PROCREATE CTR 0;

	BIFURCATE LISTS[LEFTY, RIGHTY];
	REPLICATE CHECK (LEFTY && RIGHTY);
	/*
		Logic check:
		We need the following loop to stop when at least one of the
		lists, LEFTY or RIGHTY, is dead.
		0, 0 should return dead
		0, 1 should return dead
		1, 0 should return dead
		1, 1 should return alive
	*/
	~ATH(CHECK) {
		BIFURCATE LEFTY[HEADL, TAILL];
		BIFURCATE HEADL[X, VALL];
		
		BIFURCATE RIGHTY[HEADR, TAILR];
		BIFURCATE HEADR[Y, VALR];
		
		WHEN (VALL >= VALR) {
			AGGREGATE [CTR, VALL]ITEM;
			REPLICATE LEFTY TAILL;
		} UNLESS {
			AGGREGATE [CTR, VALR]ITEM;
			REPLICATE RIGHTY TAILR;
		}
		AGGREGATE [ITEM, RESULT]RESULT;
		CTR += 1;
		REPLICATE CHECK (LEFTY && RIGHTY);
	}
	
	//Only one of these will be entered
	~ATH(LEFTY) {
		BIFURCATE LEFTY[HEADL, TAILL];
		BIFURCATE HEADL[X, VALL];
		AGGREGATE [CTR, VALL]ITEM;
		AGGREGATE [ITEM, RESULT]RESULT;
		CTR += 1;
		REPLICATE LEFTY TAILL;
	}
	~ATH(RIGHTY) {
		BIFURCATE RIGHTY[HEADR, TAILR];
		BIFURCATE HEADR[Y, VALR];
		AGGREGATE [CTR, VALR]ITEM;
		AGGREGATE [ITEM, RESULT]RESULT;
		CTR += 1;
		REPLICATE RIGHTY TAILR;
	}
	
	DIVULGATE RESULT;
}