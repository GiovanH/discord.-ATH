#!/usr/bin/env python
from athast import *
from athparser import TildeAthInterp

ath_script = Serialize([FabricateStmt(VarExpr('MERGESORT'), [VarExpr('LIST')], Serialize([PrintFunc([StringExpr('Merge sort algo start.\\n')]), ReplicateStmt(VarExpr('CURR'), VarExpr('LIST')), BifurcateStmt(VarExpr('CURR'), VarExpr('HEAD'), VarExpr('TAIL')), BifurcateStmt(VarExpr('HEAD'), VarExpr('INDEX'), VarExpr('VALUE')), DebateStmt(BinaryExpr('>', VarExpr('INDEX'), IntExpr(0)), Serialize([ProcreateStmt(VarExpr('LEFT'), VarExpr('NULL')), ProcreateStmt(VarExpr('RIGHT'), VarExpr('NULL')), ReplicateStmt(VarExpr('LENGTH'), BinaryExpr('/_', VarExpr('INDEX'), IntExpr(2))), ProcreateStmt(VarExpr('CNTL'), IntExpr(0)), ProcreateStmt(VarExpr('CNTR'), IntExpr(0)), ProcreateStmt(VarExpr('BLAH'), VarExpr('NULL')), TildeAthLoop(False, VarExpr('BLAH'), Serialize([BifurcateStmt(VarExpr('CURR'), VarExpr('HEAD'), VarExpr('TAIL')), BifurcateStmt(VarExpr('HEAD'), VarExpr('I'), VarExpr('VAL')), DebateStmt(BinaryExpr('<', VarExpr('I'), VarExpr('LENGTH')), Serialize([AggregateStmt(VarExpr('CNTL'), VarExpr('VAL'), VarExpr('NODE')), AggregateStmt(VarExpr('NODE'), VarExpr('LEFT'), VarExpr('LEFT')), ReplicateStmt(VarExpr('CNTL'), BinaryExpr('+', VarExpr('CNTL'), IntExpr(1)))], BLAH), [UnlessStmt(None, Serialize([AggregateStmt(VarExpr('CNTR'), VarExpr('VAL'), VarExpr('NODE')), AggregateStmt(VarExpr('NODE'), VarExpr('RIGHT'), VarExpr('RIGHT')), ReplicateStmt(VarExpr('CNTR'), BinaryExpr('+', VarExpr('CNTR'), IntExpr(1)))], BLAH))]), ReplicateStmt(VarExpr('CURR'), VarExpr('TAIL'))], BLAH)), PrintFunc([StringExpr('Split and recursed.\\n')]), ReplicateStmt(VarExpr('LEFT'), ExecuteStmt([VarExpr('MERGESORT'), VarExpr('LEFT')])), ReplicateStmt(VarExpr('RIGHT'), ExecuteStmt([VarExpr('MERGESORT'), VarExpr('RIGHT')])), AggregateStmt(VarExpr('LEFT'), VarExpr('RIGHT'), VarExpr('TOMERGE')), ReplicateStmt(VarExpr('SORTEDLIST'), ExecuteStmt([VarExpr('MERGE'), VarExpr('TOMERGE')])), PrintFunc([StringExpr('Going back now...\\n')]), DivulgateStmt(VarExpr('SORTEDLIST'))], THIS), [UnlessStmt(None, Serialize([PrintFunc([StringExpr('Lonely boi\\n')]), DivulgateStmt(VarExpr('CURR'))], THIS))])], THIS)), FabricateStmt(VarExpr('MERGE'), [VarExpr('LISTS')], Serialize([PrintFunc([StringExpr('Merging...\\n')]), ProcreateStmt(VarExpr('RESULT'), VarExpr('NULL')), ProcreateStmt(VarExpr('CTR'), IntExpr(0)), BifurcateStmt(VarExpr('LISTS'), VarExpr('LEFTY'), VarExpr('RIGHTY')), ReplicateStmt(VarExpr('CHECK'), BinaryExpr('&&', VarExpr('LEFTY'), VarExpr('RIGHTY'))), TildeAthLoop(False, VarExpr('CHECK'), Serialize([BifurcateStmt(VarExpr('LEFTY'), VarExpr('HEADL'), VarExpr('TAILL')), BifurcateStmt(VarExpr('HEADL'), VarExpr('X'), VarExpr('VALL')), BifurcateStmt(VarExpr('RIGHTY'), VarExpr('HEADR'), VarExpr('TAILR')), BifurcateStmt(VarExpr('HEADR'), VarExpr('Y'), VarExpr('VALR')), DebateStmt(BinaryExpr('>=', VarExpr('VALL'), VarExpr('VALR')), Serialize([AggregateStmt(VarExpr('CTR'), VarExpr('VALL'), VarExpr('ITEM')), ReplicateStmt(VarExpr('LEFTY'), VarExpr('TAILL'))], CHECK), [UnlessStmt(None, Serialize([AggregateStmt(VarExpr('CTR'), VarExpr('VALR'), VarExpr('ITEM')), ReplicateStmt(VarExpr('RIGHTY'), VarExpr('TAILR'))], CHECK))]), AggregateStmt(VarExpr('ITEM'), VarExpr('RESULT'), VarExpr('RESULT')), ReplicateStmt(VarExpr('CTR'), BinaryExpr('+', VarExpr('CTR'), IntExpr(1))), ReplicateStmt(VarExpr('CHECK'), BinaryExpr('&&', VarExpr('LEFTY'), VarExpr('RIGHTY')))], CHECK)), TildeAthLoop(False, VarExpr('LEFTY'), Serialize([BifurcateStmt(VarExpr('LEFTY'), VarExpr('HEADL'), VarExpr('TAILL')), BifurcateStmt(VarExpr('HEADL'), VarExpr('X'), VarExpr('VALL')), AggregateStmt(VarExpr('CTR'), VarExpr('VALL'), VarExpr('ITEM')), AggregateStmt(VarExpr('ITEM'), VarExpr('RESULT'), VarExpr('RESULT')), ReplicateStmt(VarExpr('CTR'), BinaryExpr('+', VarExpr('CTR'), IntExpr(1))), ReplicateStmt(VarExpr('LEFTY'), VarExpr('TAILL'))], LEFTY)), TildeAthLoop(False, VarExpr('RIGHTY'), Serialize([BifurcateStmt(VarExpr('RIGHTY'), VarExpr('HEADR'), VarExpr('TAILR')), BifurcateStmt(VarExpr('HEADR'), VarExpr('Y'), VarExpr('VALR')), AggregateStmt(VarExpr('CTR'), VarExpr('VALR'), VarExpr('ITEM')), AggregateStmt(VarExpr('ITEM'), VarExpr('RESULT'), VarExpr('RESULT')), ReplicateStmt(VarExpr('CTR'), BinaryExpr('+', VarExpr('CTR'), IntExpr(1))), ReplicateStmt(VarExpr('RIGHTY'), VarExpr('TAILR'))], RIGHTY)), PrintFunc([StringExpr('Merged!\\n')]), DivulgateStmt(VarExpr('RESULT'))], THIS)), ProcreateStmt(VarExpr('LOOP'), VarExpr('NULL')), ProcreateStmt(VarExpr('LIST'), VarExpr('NULL')), ProcreateStmt(VarExpr('COUNT'), IntExpr(0)), TildeAthLoop(False, VarExpr('LOOP'), Serialize([PrintFunc([StringExpr('Select action:')]), PrintFunc([StringExpr('[1] Add an integer to the list')]), PrintFunc([StringExpr('[2] Sort and print list')]), PrintFunc([StringExpr('[3] Exit')]), InputStmt(VarExpr('CHOICE'), StringExpr('')), DebateStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(3)), Serialize([KillFunc(VarExpr('LOOP'), [])], LOOP), [UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(2)), Serialize([DebateStmt(VarExpr('LIST'), Serialize([ReplicateStmt(VarExpr('LIST'), ExecuteStmt([VarExpr('MERGESORT'), VarExpr('LIST')])), PrintFunc([StringExpr('List was successfully sorted.\\n')]), ReplicateStmt(VarExpr('SORTED'), VarExpr('LIST')), ProcreateStmt(VarExpr('END'), VarExpr('NULL')), TildeAthLoop(False, VarExpr('END'), Serialize([BifurcateStmt(VarExpr('SORTED'), VarExpr('HEAD'), VarExpr('TAIL')), BifurcateStmt(VarExpr('HEAD'), VarExpr('INDEX'), VarExpr('VALUE')), PrintFunc([StringExpr('~d\\n'), VarExpr('VALUE')]), DebateStmt(UnaryArithExpr('!', VarExpr('TAIL')), Serialize([KillFunc(VarExpr('END'), [])], END), [])], END))], LOOP), [UnlessStmt(None, Serialize([PrintFunc([StringExpr('Queue is empty.\\n')])], LOOP))])], LOOP)), UnlessStmt(BinaryExpr('==', VarExpr('CHOICE'), IntExpr(1)), Serialize([InputStmt(VarExpr('ITEM'), StringExpr('Integer to add :')), AggregateStmt(VarExpr('COUNT'), VarExpr('ITEM'), VarExpr('HEAD')), AggregateStmt(VarExpr('HEAD'), VarExpr('LIST'), VarExpr('LIST')), ReplicateStmt(VarExpr('COUNT'), BinaryExpr('+', VarExpr('COUNT'), IntExpr(1)))], LOOP)), UnlessStmt(None, Serialize([PrintFunc([StringExpr('Invalid input.')])], LOOP))])], LOOP)), KillFunc(VarExpr('THIS'), [])], THIS)
TildeAthInterp().execute(ath_script)
